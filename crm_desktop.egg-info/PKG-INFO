Metadata-Version: 2.4
Name: crm_desktop
Version: 0.1.0
Summary: CRM desktop application
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: anyio==4.9.0
Requires-Dist: appdirs==1.4.4
Requires-Dist: cachetools==5.5.2
Requires-Dist: certifi==2025.1.31
Requires-Dist: charset-normalizer==3.4.1
Requires-Dist: colorama==0.4.6
Requires-Dist: et_xmlfile==2.0.0
Requires-Dist: google-api-core==2.24.2
Requires-Dist: google-api-python-client==2.166.0
Requires-Dist: google-auth==2.38.0
Requires-Dist: google-auth-httplib2==0.2.0
Requires-Dist: google-auth-oauthlib==1.2.1
Requires-Dist: googleapis-common-protos==1.69.2
Requires-Dist: greenlet==3.1.1
Requires-Dist: h11==0.16.0
Requires-Dist: httpcore==1.0.9
Requires-Dist: httplib2==0.22.0
Requires-Dist: httpx==0.27.2
Requires-Dist: idna==3.10
Requires-Dist: iniconfig==2.1.0
Requires-Dist: jsonschema==4.23.0
Requires-Dist: MarkupSafe==3.0.2
Requires-Dist: numpy==2.2.4
Requires-Dist: oauthlib==3.2.2
Requires-Dist: openpyxl==3.1.5
Requires-Dist: packaging==25.0
Requires-Dist: pandas==2.2.3
Requires-Dist: peewee==3.17.9
Requires-Dist: pluggy==1.5.0
Requires-Dist: proto-plus==1.26.1
Requires-Dist: protobuf==6.30.2
Requires-Dist: psycopg2-binary==2.9.10
Requires-Dist: pyasn1==0.6.1
Requires-Dist: pyasn1_modules==0.4.2
Requires-Dist: pyparsing==3.2.3
Requires-Dist: PySide6==6.9.0
Requires-Dist: PySide6_Addons==6.9.0
Requires-Dist: PySide6_Essentials==6.9.0
Requires-Dist: pytest==8.3.5
Requires-Dist: pytest-timeout==2.3.1
Requires-Dist: pytest-qt==4.4.0
Requires-Dist: python-dateutil==2.9.0.post0
Requires-Dist: python-dotenv==1.1.0
Requires-Dist: python-telegram-bot==22.0
Requires-Dist: pytz==2025.2
Requires-Dist: requests==2.32.3
Requires-Dist: requests-oauthlib==2.0.0
Requires-Dist: rsa==4.9
Requires-Dist: shiboken6==6.9.0
Requires-Dist: six==1.17.0
Requires-Dist: sniffio==1.3.1
Requires-Dist: tqdm==4.67.1
Requires-Dist: typing_extensions==4.13.1
Requires-Dist: tzdata==2025.2
Requires-Dist: uritemplate==4.1.1
Requires-Dist: urllib3==2.3.0
Requires-Dist: xlrd==2.0.1
Requires-Dist: openai==1.14.3
Requires-Dist: PyPDF2==3.0.1
Requires-Dist: pywin32==306; sys_platform == "win32"

# CRM Desktop

Простое учебное CRM‑приложение на Python с использованием Peewee и PySide6. Позволяет вести базу клиентов, сделок, полисов и задач. Для работы с задачами есть отдельный Telegram‑бот. Файлы клиентов и сделок могут храниться в Google Drive.

Подробное руководство по установке зависимостей и отправке изменений см. в [CONTRIBUTING.md](CONTRIBUTING.md).

## Структура каталогов

- `database/` – модели и инициализация БД.
- `services/` – бизнес‑логика и утилиты.
- `ui/` – Qt‑интерфейс приложения.
- `telegram_bot/` – код Telegram‑бота и Dockerfile.
- `tests/` – автотесты `pytest`.
- `resources/` – стили и статические файлы.
- `utils/` – вспомогательные модули.

## Пример `.env`

```env
DATABASE_URL=sqlite:///crm.db
TG_BOT_TOKEN=000000:telegram-bot-token
ADMIN_CHAT_ID=123456789  # Telegram ID администратора для уведомлений
APPROVED_EXECUTOR_IDS=111,222  # Telegram ID разрешённых исполнителей
GOOGLE_DRIVE_LOCAL_ROOT=/path/to/drive
GOOGLE_CREDENTIALS=credentials.json
GOOGLE_ROOT_FOLDER_ID=1-hTRZ7meDTGDQezoY_ydFkmXIng3gXFm
GOOGLE_SHEETS_TASKS_ID=1AbCdEfGh  # ID таблицы задач Google Sheets
GOOGLE_SHEETS_CALCULATIONS_ID=1AbCdEfGh  # ID таблицы расчётов Google Sheets
OPENAI_API_KEY=sk-example
OPENAI_BASE_URL=https://api.openai.com/v1  # например, https://api.together.xyz/v1
OPENAI_MODEL=gpt-4o  # например, gpt-3.5-turbo
LOG_LEVEL=INFO  # уровень логирования (например, DEBUG)
LOG_DIR=/path/to/logs  # каталог для файлов логов (опционально)
AI_POLICY_PROMPT=
```

Переменная `ADMIN_CHAT_ID` задаёт Telegram‑ID администратора, которому бот отправляет уведомления.

Переменная `LOG_LEVEL` управляет уровнем логов. Допустимые значения совпадают с уровнями модуля `logging` (например, `DEBUG`, `INFO`). По умолчанию используется `INFO`.

Переменная `LOG_DIR` задаёт путь к каталогу с логами. Если она не указана, используется стандартный путь `appdirs.user_log_dir` для приложения `crm_desktop`.

## Подготовка окружения

1. Создайте и активируйте виртуальное окружение:

```bash
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate
```

2. **Только для Linux:** перед установкой зависимостей выполните:

```bash
sudo apt-get update
sudo apt-get install -y libegl1 libgl1
```

Эти библиотеки необходимы для корректной работы `PySide6` и автотестов.

3. Установите зависимости:

```bash
pip install -e .
```

Все зависимости и настройки инструментов описаны в `pyproject.toml`.

4. Скопируйте `.env.example` в `.env` и укажите свои значения.

## Запуск приложения

1. Подготовьте окружение (см. раздел выше).
2. Запустите интерфейс командой `python main.py`.

После запуска откроется вкладка **Главная** со сводной статистикой. В нижней части окна отображается строка состояния с количеством записей в текущей таблице. На дашборде показываются ближайшие задачи, заканчивающиеся полисы и напоминания по сделкам. Для каждой записи выводятся основные детали: дата, короткая заметка и связанные клиент, сделка или полис. Записи кликабельны и открывают подробную карточку объекта. Дополнительно выводятся счётчики задач: сколько отправлено в Telegram, сколько сейчас в работе и сколько ожидают подтверждения.

## Запуск Telegram‑бота

Бот работает только внутри Docker‑контейнера. Перед запуском
скопируйте `telegram_bot/.env.example` в `telegram_bot/.env` и
укажите значения хотя бы для переменных `DATABASE_URL` и `TG_BOT_TOKEN`.
В деталях сделки есть кнопка «Отправить задачу исполнителю». Она
создаёт новую задачу, сразу отправляет её в Telegram выбранному
исполнителю и помечает выполненной. Сообщение содержит кнопки
«Выполнить» и «Написать вопрос». Список
незавершённых задач можно получить командой `/tasks`.
В таблице задач появилась кнопка «Напомнить»,
которая возвращает выбранные задачи в очередь и
повторно отправляет уведомление исполнителю.

## Docker Compose

В репозитории есть `docker-compose.yml` для запуска PostgreSQL и бота.
Перед стартом создайте в корне файл `.env` с параметрами базы:

```env
POSTGRES_DB=crm
POSTGRES_USER=crm_user
POSTGRES_PASSWORD=crm_pass
```

`telegram_bot/.env` пример (такой же файл `.env.example` уже есть в каталоге):

```env
DATABASE_URL=postgres://crm_user:crm_pass@db:5432/crm
TG_BOT_TOKEN=000000:telegram-bot-token
APPROVED_EXECUTOR_IDS=111,222
GOOGLE_DRIVE_LOCAL_ROOT=/path/to/drive  # опционально
GOOGLE_CREDENTIALS=credentials.json     # опционально
```

Запустите сервисы командой:

```bash
docker-compose up -d
```

Сервис `db` использует том `db_data:/var/lib/postgresql/data`.

## Тесты

Запуск тестов выполняется командой с таймаутом:

```bash
PYTEST_TIMEOUT=120 pytest -vv
```

Дополнительные рекомендации по тестированию смотрите в [CONTRIBUTING.md](CONTRIBUTING.md).

## Работа с Google Drive

Функции загрузки и создания папок используют сервисный аккаунт Google.
Укажите путь к JSON‑файлу в переменной `GOOGLE_CREDENTIALS` и локальный
каталог синхронизации в `GOOGLE_DRIVE_LOCAL_ROOT`. Для корректной работы
необходимы библиотеки `google-api-python-client`, `google-auth` и
`google-auth-oauthlib` (уже перечислены в `pyproject.toml`).

При создании клиентов и сделок папки создаются сразу в облаке, а локальный
путь просто сохраняется и появится после синхронизации Google Drive. Если при
открытии папки её нет на диске, приложение предложит выбрать каталог вручную
или отменить операцию.

## Резервное копирование

Скрипт `backup.py` использует переменную окружения `DATABASE_URL` и
сохраняет файлы бэкапа в Google Drive.
