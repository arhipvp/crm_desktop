import logging
from PySide6.QtCore import QDate
from PySide6.QtWidgets import (
    QDialog,
    QDateEdit,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QTableWidget,
    QTableWidgetItem,
    QVBoxLayout,
)

from services.folder_utils import open_folder
from ui.common.styled_widgets import styled_button

from database.models import Policy
from services.policy_service import (
    add_policy,
    get_unique_policy_field_values,
    update_policy,
    DuplicatePolicyError,
)
from services.deal_service import get_all_deals, get_deals_by_client_id
from ui.forms.policy_merge_dialog import PolicyMergeDialog
from ui.base.base_edit_form import BaseEditForm
from ui.common.combo_helpers import (
    create_client_combobox,
    create_deal_combobox,
    create_editable_combo,
    set_selected_by_id,
    populate_combo,
)
from ui.common.date_utils import add_year_minus_one_day
from ui.common.message_boxes import show_error, show_info

logger = logging.getLogger(__name__)


class PolicyForm(BaseEditForm):
    """
    –§–æ—Ä–º–∞ –ø–æ–ª–∏—Å–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ¬´–∂—ë—Å—Ç–∫–æ¬ª –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π client / deal,
    —á—Ç–æ–±—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª–∏—Å—ã –ø—Ä—è–º–æ –∏–∑ –æ–∫–Ω–∞ —Å–¥–µ–ª–∫–∏.
    """

    EXTRA_HIDDEN = {"deal", "renewed_to"}

    def __init__(
        self,
        policy=None,
        *,  # —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ!
        forced_client=None,  # Client | int | None
        forced_deal=None,  # Deal   | int | None
        parent=None,
        first_payment_paid=False,
    ):
        self._auto_end_date = None  # –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self._draft_payments = []  # –°–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)

        self._forced_client = forced_client
        self._forced_deal = forced_deal
        self._first_payment_paid = first_payment_paid
        super().__init__(
            instance=policy, model_class=Policy, entity_name="–ø–æ–ª–∏—Å", parent=parent
        )
        # –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        self.on_client_changed()

    def set_instance(self, instance):
        super().set_instance(instance)
        if instance and hasattr(instance, "deal_id"):
            set_selected_by_id(self.deal_combo, instance.deal_id)

    def _create_button_panel(self):
        btns = QHBoxLayout()
        self.save_btn = styled_button(
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", icon="üíæ", role="primary", shortcut="Ctrl+S"
        )
        self.save_btn.setDefault(True)
        self.cancel_btn = styled_button("–û—Ç–º–µ–Ω–∞", icon="‚ùå", shortcut="Esc")

        self.save_btn.clicked.connect(self.save)
        self.cancel_btn.clicked.connect(self.reject)

        btns.addStretch()
        if self.instance and (
            getattr(self.instance, "drive_folder_path", None)
            or getattr(self.instance, "drive_folder_link", None)
        ):
            folder_btn = styled_button("üìÇ –ü–∞–ø–∫–∞", tooltip="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞")
            folder_btn.clicked.connect(self._open_folder)
            btns.addWidget(folder_btn)

        btns.addWidget(self.save_btn)
        btns.addWidget(self.cancel_btn)
        self.layout.addLayout(btns)

    def _open_folder(self):
        if not self.instance:
            return
        path = (
            getattr(self.instance, "drive_folder_path", None)
            or getattr(self.instance, "drive_folder_link", None)
        )
        if path:
            open_folder(path, parent=self)

    # ---------- –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã ----------
    def build_custom_fields(self):
        # 1) –ö–ª–∏–µ–Ω—Ç: –∫–æ–º–±–æ–±–æ–∫—Å + –∞–≤—Ç–æ–ø–æ–∏—Å–∫
        self.client_combo = create_client_combobox()
        self.fields["client_id"] = self.client_combo
        self.form_layout.insertRow(0, "–ö–ª–∏–µ–Ω—Ç:", self.client_combo)
        # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω ‚Äì –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∏ ¬´–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º¬ª –≤–∏–¥–∂–µ—Ç
        if self._forced_client is not None:
            client_id = getattr(self._forced_client, "id", self._forced_client)
            idx = self.client_combo.findData(client_id)
            if idx >= 0:
                self.client_combo.setCurrentIndex(idx)
            self.client_combo.setEnabled(False)

        initial_client_id = (
            getattr(self._forced_client, "id", self._forced_client)
            if self._forced_client is not None
            else None
        )
        self.deal_combo = create_deal_combobox(initial_client_id)
        self.fields["deal_id"] = self.deal_combo
        self.form_layout.insertRow(1, "–°–¥–µ–ª–∫–∞:", self.deal_combo)

        if self._forced_deal is not None:
            deal_id = getattr(self._forced_deal, "id", self._forced_deal)
            idx = self.deal_combo.findData(deal_id)
            if idx >= 0:
                self.deal_combo.setCurrentIndex(idx)
            self.deal_combo.setEnabled(False)

        self.policy_number_edit = QLineEdit()
        self.fields["policy_number"] = self.policy_number_edit
        self.form_layout.addRow("–ù–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞:", self.policy_number_edit)
        extra_fields = [
            ("vehicle_brand", "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
            ("vehicle_model", "–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
            ("sales_channel", "–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂"),
            ("contractor", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"),
            ("insurance_company", "–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"),
            ("insurance_type", "–¢–∏–ø —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è"),
        ]
        for field, label in extra_fields:
            values = get_unique_policy_field_values(field)
            combo = create_editable_combo(values)
            self.fields[field] = combo
            self.form_layout.addRow(label + ":", combo)
        # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –ø–æ–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã!
        from PySide6.QtWidgets import QCheckBox

        self.first_payment_checkbox = QCheckBox("–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
        self.form_layout.addRow("", self.first_payment_checkbox)

        self.start_date_edit = self.fields.get("start_date")
        self.end_date_edit = self.fields.get("end_date")

        self.build_payments_section()

        if self.start_date_edit and self.end_date_edit:
            self.start_date_edit.dateChanged.connect(self.on_start_date_changed)
            # –ï—Å–ª–∏ start_date —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π end_date
            qd = self.start_date_edit.date()
            if qd.isValid():
                self.on_start_date_changed(qd)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
        self.client_combo.currentIndexChanged.connect(self.on_client_changed)

    # ---------- —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ----------
    def collect_data(self) -> dict:
        data = super().collect_data()

        # –∫–ª–∏–µ–Ω—Ç ‚Äî –ª–∏–±–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ª–∏–±–æ –∏–∑ –∫–æ–º–±–æ–±–æ–∫—Å–∞
        if self._forced_client is not None:
            data["client_id"] = getattr(self._forced_client, "id", self._forced_client)
        else:
            data["client_id"] = self.client_combo.currentData()

        if self._forced_deal is not None:
            data["deal_id"] = getattr(self._forced_deal, "id", self._forced_deal)
        else:
            data["deal_id"] = self.deal_combo.currentData()

            # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–æ–≤—ã—Ö –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤
        for field in [
            "vehicle_brand",
            "vehicle_model",
            "sales_channel",
            "contractor",
            "insurance_company",
            "insurance_type",
        ]:
            widget = self.fields.get(field)
            if widget:
                text = widget.currentText().strip()
                value = None if not text or text == "‚Äî" else text
                if value is not None or field == "contractor":
                    data[field] = value

        return data

    # ---------- —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ----------
    def save_data(self, data=None):
        data = data or self.collect_data()
        if not data.get("end_date"):
            from PySide6.QtWidgets import QMessageBox

            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ª–∏—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!"
            )
            return None

        # –í–°–Ø –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π —Ç–µ–ø–µ—Ä—å –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å
        payments = self._draft_payments if self._draft_payments else None

        if self.instance:
            policy = update_policy(self.instance, **data)
        else:
            self._first_payment_paid = self.first_payment_checkbox.isChecked()

            policy = add_policy(
                payments=payments, first_payment_paid=self._first_payment_paid, **data
            )

        return policy

    def save(self):
        data = self.collect_data()
        try:
            saved = self.save_data(data)
            if saved:
                self.saved_instance = saved
                self.accept()
        except DuplicatePolicyError as e:
            dlg = PolicyMergeDialog(e.existing_policy, data, parent=self)
            if dlg.exec() == QDialog.Accepted:
                merged = dlg.get_merged_data()
                updated = update_policy(e.existing_policy, **merged)
                self.saved_instance = updated
                show_info("–ü–æ–ª–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω—ë–Ω.")
                path = (
                    getattr(updated, "drive_folder_path", None)
                    or getattr(updated, "drive_folder_link", None)
                )
                if path:
                    open_folder(path, parent=self)
                self.accept()
        except ValueError as e:
            show_error(str(e))
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ %s", self.__class__.__name__)
            from PySide6.QtWidgets import QMessageBox

            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {self.entity_name}."
            )

    def on_start_date_changed(self, qdate: QDate):
        if not (self.end_date_edit and qdate.isValid()):
            return
        auto_end = add_year_minus_one_day(qdate)
        curr_end = self.end_date_edit.date()
        # –¢–µ–ø–µ—Ä—å: –µ—Å–ª–∏ end_date –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ª–∏–±–æ –æ–Ω–æ —Å—Ç–æ–∏—Ç –≤ "–º–∏–Ω–∏–º—É–º–µ", –ª–∏–±–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        if (
            not curr_end.isValid()
            or curr_end == self.end_date_edit.minimumDate()
            or self._auto_end_date is None
            or curr_end == self._auto_end_date
        ):
            self.end_date_edit.setDate(auto_end)
            self._auto_end_date = auto_end

    def on_client_changed(self, _=None):
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É."""
        if not self.deal_combo.isEnabled():
            return
        client_id = self.client_combo.currentData()
        deals = (
            list(get_deals_by_client_id(client_id))
            if client_id is not None
            else list(get_all_deals())
        )
        current_deal = self.deal_combo.currentData()
        populate_combo(
            self.deal_combo,
            deals,
            label_func=lambda d: f"{d.client.name} - {d.description} ",
            id_attr="id",
            placeholder="‚Äî –°–¥–µ–ª–∫–∞ ‚Äî",
        )
        if current_deal is not None:
            set_selected_by_id(self.deal_combo, current_deal)

    def build_payments_section(self):
        # –ì—Ä—É–ø–ø–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        group = QGroupBox("–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–ª–∏—Å—É")
        layout = QVBoxLayout(group)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–¥–∞—Ç–∞, —Å—É–º–º–∞)
        self.payments_table = QTableWidget(0, 3)
        self.payments_table.setHorizontalHeaderLabels(["–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞", "–°—É–º–º–∞", ""])
        layout.addWidget(self.payments_table)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        hlayout = QHBoxLayout()
        self.pay_date_edit = QDateEdit()
        self.pay_date_edit.setCalendarPopup(True)
        self.pay_date_edit.setDate(QDate.currentDate())
        hlayout.addWidget(QLabel("–î–∞—Ç–∞:"))
        hlayout.addWidget(self.pay_date_edit)

        self.pay_amount_edit = QLineEdit()
        hlayout.addWidget(QLabel("–°—É–º–º–∞:"))
        hlayout.addWidget(self.pay_amount_edit)

        self.btn_add_payment = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂")
        self.btn_add_payment.clicked.connect(self.on_add_payment)
        hlayout.addWidget(self.btn_add_payment)
        layout.addLayout(hlayout)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É
        self.form_layout.addRow(group)
        for pay in self._draft_payments:
            self.add_payment_row(pay)

    def on_add_payment(self):
        date = self.pay_date_edit.date()
        amount_text = self.pay_amount_edit.text().replace(",", ".")
        try:
            amount = float(amount_text)
        except Exception:
            from PySide6.QtWidgets import QMessageBox

            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
            return
        # –î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω–æ–≤–æ–π —Å–ø–∏—Å–æ–∫
        self._draft_payments.append({"payment_date": date.toPython(), "amount": amount})
        row = self.payments_table.rowCount()
        self.payments_table.insertRow(row)
        self.payments_table.setItem(
            row, 0, QTableWidgetItem(date.toString("dd.MM.yyyy"))
        )
        self.payments_table.setItem(row, 1, QTableWidgetItem(f"{amount:.2f}"))

        # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
        btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        # –¢.–∫. row –±—É–¥–µ—Ç "–∑–∞–º–æ—Ä–æ–∂–µ–Ω" –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º lambda —Å row=row:
        btn.clicked.connect(lambda _, r=row: self.on_delete_payment(r))
        self.payments_table.setCellWidget(row, 2, btn)

        self.pay_amount_edit.clear()

    def on_delete_payment(self, row):
        # –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        self.payments_table.removeRow(row)
        # –£–¥–∞–ª–∏—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (–≤–∞–∂–Ω–æ! ‚Äî –∏–Ω–¥–µ–∫—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å row)
        if 0 <= row < len(self._draft_payments):
            del self._draft_payments[row]

    def add_payment_row(self, pay: dict):
        date = pay.get("payment_date")
        amount = pay.get("amount")
        if not date or amount is None:
            return
        row = self.payments_table.rowCount()
        self.payments_table.insertRow(row)
        self.payments_table.setItem(
            row,
            0,
            QTableWidgetItem(
                QDate(date.year, date.month, date.day).toString("dd.MM.yyyy")
            ),
        )
        self.payments_table.setItem(row, 1, QTableWidgetItem(f"{amount:.2f}"))
        btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        btn.clicked.connect(lambda _, r=row: self.on_delete_payment(r))
        self.payments_table.setCellWidget(row, 2, btn)
