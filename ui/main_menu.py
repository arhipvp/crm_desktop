from PySide6.QtWidgets import QMenuBar, QMessageBox, QFileDialog
from PySide6.QtGui import QAction, QKeySequence
import subprocess
import sys
from pathlib import Path


class MainMenu(QMenuBar):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.refresh_callback = None  # üîÑ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"

        # üî∏ –§–∞–π–ª
        file_menu = self.addMenu("–§–∞–π–ª")

        export_action = QAction("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...", self)
        export_action.setShortcut(QKeySequence("Ctrl+E"))
        export_action.triggered.connect(self.export_to_csv)
        file_menu.addAction(export_action)

        backup_action = QAction("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", self)
        backup_action.setShortcut(QKeySequence("Ctrl+B"))
        backup_action.triggered.connect(self.run_backup)
        file_menu.addAction(backup_action)

        # üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        refresh_action = QAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self)
        refresh_action.setShortcut(QKeySequence("F5"))
        refresh_action.triggered.connect(self.on_refresh_triggered)
        file_menu.addAction(refresh_action)

        import_policy_action = QAction("üì• –ò–º–ø–æ—Ä—Ç –ø–æ–ª–∏—Å–∞ –∏–∑ JSON‚Ä¶", self)
        import_policy_action.triggered.connect(self.open_import_policy_json)
        file_menu.addAction(import_policy_action)

        executor_action = QAction("üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏‚Ä¶", self)
        executor_action.triggered.connect(self.open_executors)
        file_menu.addAction(executor_action)

        settings_action = QAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Ä¶", self)
        settings_action.triggered.connect(self.open_settings)
        file_menu.addAction(settings_action)

        file_menu.addSeparator()

        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut(QKeySequence("Ctrl+Q"))
        exit_action.triggered.connect(self.close_app)
        file_menu.addAction(exit_action)

        # üî∏ –°–ø—Ä–∞–≤–∫–∞
        help_menu = self.addMenu("–°–ø—Ä–∞–≤–∫–∞")

        about_action = QAction("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

        docs_action = QAction("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", self)
        docs_action.triggered.connect(self.open_docs)
        help_menu.addAction(docs_action)

        consultant_action = QAction("ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç‚Ä¶", self)
        consultant_action.triggered.connect(self.open_ai_consultant)
        help_menu.addAction(consultant_action)

    def export_to_csv(self):
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ CSV", "", "CSV Files (*.csv)"
        )
        if file_path:
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–°—é–¥–∞ –±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç: {file_path}")
            # üîß –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞

    def close_app(self):
        self.parent().close()

    def show_about(self):
        QMessageBox.about(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "CRM-–¥–µ—Å–∫—Ç–æ–ø\n–í–µ—Ä—Å–∏—è 1.0\n\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —É—á—ë—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å–¥–µ–ª–æ–∫ –∏ –ø–æ–ª–∏—Å–æ–≤.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.",
        )

    def register_refresh_callback(self, func):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        self.refresh_callback = func

    def on_refresh_triggered(self):
        if self.refresh_callback:
            self.refresh_callback()

    def open_import_policy_json(self):
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–≤–µ—Ä—Ö (–≤ MainWindow)
        mw = self.parent()
        if mw and hasattr(mw, "open_import_policy_json"):
            mw.open_import_policy_json()

    def open_executors(self):
        mw = self.parent()
        if mw and hasattr(mw, "open_executors"):
            mw.open_executors()

    def open_settings(self):
        mw = self.parent()
        if mw and hasattr(mw, "open_settings"):
            mw.open_settings()
        else:
            from ui.forms.settings_dialog import SettingsDialog

            dlg = SettingsDialog(self)
            dlg.exec()

    def open_ai_consultant(self):
        mw = self.parent()
        if mw and hasattr(mw, "open_ai_consultant"):
            mw.open_ai_consultant()
        else:
            from ui.forms.ai_consultant_dialog import AiConsultantDialog

            dlg = AiConsultantDialog(self)
            dlg.exec()

    def open_docs(self):
        import webbrowser

        webbrowser.open_new_tab("https://example.com/docs")

    def run_backup(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        script = Path(__file__).resolve().parent.parent / "backup.py"
        try:
            subprocess.run([sys.executable, str(script)], check=True)
            QMessageBox.information(self, "–ë—ç–∫–∞–ø", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞.")
        except Exception as exc:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ç–∫–∞–ø:\n{exc}",
            )
