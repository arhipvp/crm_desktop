import logging

logger = logging.getLogger(__name__)

from PySide6.QtCore import Qt

from database.models import Payment
from services.payment_service import (
    build_payment_query,
    get_payments_page,
    mark_payment_deleted,
)
from ui.base.base_table_model import BaseTableModel
from ui.base.base_table_view import BaseTableView
from ui.common.message_boxes import confirm, show_error
from ui.forms.payment_form import PaymentForm
from ui.views.payment_detail_view import PaymentDetailView


class PaymentTableView(BaseTableView):
    def __init__(self, parent=None, deal_id=None, **kwargs):
        self.deal_id = deal_id
        checkbox_map = {
            "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ": lambda state: self.load_data(),
            "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ": lambda state: self.load_data(),
        }
        super().__init__(
            parent=parent,
            model_class=Payment,
            checkbox_map=checkbox_map,
        )
        self.model_class = Payment  # –∏–ª–∏ Client, Policy –∏ —Ç.–¥.
        self.form_class = PaymentForm
        self.row_double_clicked.connect(self.open_detail)
        self.load_data()

    def get_filters(self) -> dict:
        filters = {
            "search_text": self.filter_controls.get_search_text(),
            "show_deleted": self.filter_controls.is_checked("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ"),
            "only_paid": self.filter_controls.is_checked("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ"),
        }
        if self.deal_id is not None:
            filters["deal_id"] = self.deal_id
        return filters

    def load_data(self):
        # 1) —á–∏—Ç–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = self.get_filters()

        # 2) –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        logger.debug("üìä –§–∏–ª—å—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–µ–π: %s", filters)

        items = get_payments_page(self.page, self.per_page, **filters)

        total = build_payment_query(**filters).count()

        logger.debug("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: %d", len(items))

        # 3) –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
        self.set_model_class_and_items(Payment, list(items), total_count=total)

    def get_selected(self):
        idx = self.table.currentIndex()
        if not idx.isValid():
            return None
        return self.model.get_item(idx.row())

    def add_new(self):
        form = PaymentForm()
        if form.exec():
            self.refresh()

    def edit_selected(self, _=None):
        payment = self.get_selected()
        if payment:
            form = PaymentForm(payment)
            if form.exec():
                self.refresh()

    def delete_selected(self):
        payment = self.get_selected()
        if not payment:
            return
        if confirm(f"–£–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –Ω–∞ {payment.amount} ‚ÇΩ?"):
            try:
                mark_payment_deleted(payment.id)
                self.refresh()
            except Exception as e:
                show_error(str(e))

    def open_detail(self, payment: Payment):
        if self.use_inline_details:
            self.set_detail_widget(PaymentDetailView(payment, parent=self))
        else:
            dlg = PaymentDetailView(payment, parent=self)
            dlg.exec()


class PaymentTableModel(BaseTableModel):
    def __init__(self, objects: list, model_class, parent=None):
        super().__init__(objects, model_class, parent)
        self.virtual_fields = ["has_income", "has_expense"]
        self.headers += ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]

    def columnCount(self, parent=None):
        return len(self.fields) + len(self.virtual_fields)

    def data(self, index, role=Qt.DisplayRole):
        if not index.isValid():
            return None

        obj = self.objects[index.row()]
        col = index.column()

        # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è ‚Äî –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
        if col >= len(self.fields):
            v_field = self.virtual_fields[col - len(self.fields)]

            if role == Qt.DisplayRole:
                if v_field == "has_income":
                    return "‚úÖ" if getattr(obj, "income_count", 0) > 0 else "‚Äî"
                if v_field == "has_expense":
                    return "üí∏" if getattr(obj, "expense_count", 0) > 0 else "‚Äî"

            return None

        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è ‚Äî –∫–∞–∫ –≤ BaseTableModel
        return super().data(index, role)

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole or orientation != Qt.Horizontal:
            return None

        if section < len(self.headers):
            return self.headers[section]
        else:
            return self.virtual_fields[section - len(self.fields)].capitalize()
