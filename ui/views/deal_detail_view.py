from datetime import date, timedelta

from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QDialog,
    QDialogButtonBox,
    QFormLayout,
    QHBoxLayout,
    QLabel,
    QSizePolicy,
    QTabWidget,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)
from PySide6.QtGui import (
    QSyntaxHighlighter,
    QTextCharFormat,
    QColor,
    QFontDatabase,
    QFont,
)
import re

from database.models import Task
from services.deal_service import (
    get_next_deal,
    get_policies_by_deal_id,
    get_prev_deal,
    get_tasks_by_deal_id,
    update_deal,
)
from services.folder_utils import open_folder, copy_path_to_clipboard
from services.payment_service import get_payments_by_deal_id
from services.policy_service import get_policies_by_deal_id
from ui.common.date_utils import format_date
from ui.common.message_boxes import confirm
from ui.common.styled_widgets import styled_button
from utils.screen_utils import get_scaled_size
from ui.forms.deal_form import DealForm
from ui.forms.import_policy_json_form import ImportPolicyJsonForm
from ui.forms.income_form import IncomeForm
from ui.forms.payment_form import PaymentForm
from ui.forms.policy_form import PolicyForm
from ui.forms.task_form import TaskForm
from ui.views.payment_table_view import PaymentTableView
from ui.views.policy_table_view import PolicyTableView
from ui.views.task_table_view import TaskTableView  # ‚Üê –Ω–∞—à –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤–∏–¥ –∑–∞–¥–∞—á


class _CalcHighlighter(QSyntaxHighlighter):
    """Highlight timestamps at the beginning of each line."""

    _regex = re.compile(r"^\[\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}\]")

    def highlightBlock(self, text: str) -> None:
        m = self._regex.match(text)
        if m:
            fmt = QTextCharFormat()
            fmt.setForeground(QColor("blue"))
            fmt.setFontWeight(QFont.Bold)
            self.setFormat(m.start(), m.end() - m.start(), fmt)


class DealDetailView(QDialog):
    def __init__(self, deal, parent=None):
        super().__init__(parent)
        self.instance = deal
        self.setWindowTitle(
            f"–°–¥–µ–ª–∫–∞ #{deal.id} ‚Äî {deal.client.name}: {deal.description}"
        )
        size = get_scaled_size(1200, 800)
        self.resize(size)
        self.setMinimumSize(640, 480)

        self.layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel(f"<h1>–°–¥–µ–ª–∫–∞ #{deal.id}</h1>")
        header.setTextFormat(Qt.RichText)
        header.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.layout.addWidget(header)

        # KPI-–ø–∞–Ω–µ–ª—å
        self._init_kpi_panel()

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.layout.addWidget(self.tabs, stretch=1)
        self._init_tabs()

        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self._init_actions()

    def _init_kpi_panel(self):
        kpi_layout = QHBoxLayout()
        cnt_policies = len(get_policies_by_deal_id(self.instance.id))
        cnt_payments = len(get_payments_by_deal_id(self.instance.id))
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á

        cnt_tasks = len(get_tasks_by_deal_id(self.instance.id))
        for text in [
            f"–ü–æ–ª–∏—Å–æ–≤: <b>{cnt_policies}</b>",
            f"–ü–ª–∞—Ç–µ–∂–µ–π: <b>{cnt_payments}</b>",
            f"–ó–∞–¥–∞—á: <b>{cnt_tasks}</b>",
        ]:
            lbl = QLabel(text)
            lbl.setTextFormat(Qt.RichText)
            kpi_layout.addWidget(lbl)
        kpi_layout.addStretch()
        self.layout.addLayout(kpi_layout)

    def _init_tabs(self):
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∫–ª–∞–¥–∫–∏
        while self.tabs.count():
            w = self.tabs.widget(0)
            self.tabs.removeTab(0)
            w.deleteLater()

        # 1) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QWidget()
        form = QFormLayout(info)
        form.setVerticalSpacing(2)
        form.setHorizontalSpacing(10)
        form.setLabelAlignment(Qt.AlignRight)

        def tight_label(text: str) -> QLabel:
            lbl = QLabel(text)
            lbl.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Fixed)
            lbl.setMinimumHeight(1)
            lbl.setTextFormat(Qt.RichText)
            return lbl

        form.addRow("ID:", tight_label(str(self.instance.id)))
        form.addRow("–ö–ª–∏–µ–Ω—Ç:", tight_label(f"<b>{self.instance.client.name}</b>"))
        form.addRow("–¢–µ–ª–µ—Ñ–æ–Ω:", tight_label(self.instance.client.phone or "‚Äî"))

        start_label = tight_label(format_date(self.instance.start_date))
        form.addRow("–°—Ç–∞—Ä—Ç:", start_label)

        # –°—Ç–∞—Ç—É—Å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.status_edit = QTextEdit(self.instance.status)
        self.status_edit.setFixedHeight(40)
        form.addRow("–°—Ç–∞—Ç—É—Å:", self.status_edit)

        # –û–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.desc_edit = QTextEdit(self.instance.description)
        self.desc_edit.setFixedHeight(60)
        self.desc_edit.setReadOnly(True)
        form.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", self.desc_edit)

        # –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—á–µ—Ç—ã
        self.calc_append = QTextEdit()
        self.calc_append.setPlaceholderText("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å‚Ä¶")
        self.calc_append.setFixedHeight(50)
        form.addRow("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—á–µ—Ç—ã:", self.calc_append)

        # –†–∞—Å—á–µ—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.calc_view = QTextEdit()
        self.calc_view.setReadOnly(True)
        self.calc_view.setFixedHeight(140)
        self.calc_view.setFont(QFontDatabase.systemFont(QFontDatabase.FixedFont))
        self.calc_view.setPlainText(self.instance.calculations or "‚Äî")
        self._calc_highlighter = _CalcHighlighter(self.calc_view.document())
        form.addRow("–†–∞—Å—á–µ—Ç—ã:", self.calc_view)

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞
        from ui.common.date_utils import TypableDateEdit

        self.reminder_date = TypableDateEdit(self.instance.reminder_date)
        form.addRow("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", self.reminder_date)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        btn_save = styled_button(
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", shortcut="Ctrl+Enter"
        )
        btn_save.clicked.connect(self._on_inline_save)
        form.addRow(btn_save)

        info.setLayout(form)
        self.tabs.addTab(info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

        # 2) –ü–æ–ª–∏—Å—ã

        pol_tab = QWidget()
        pol_l = QVBoxLayout(pol_tab)

        hlayout = QHBoxLayout()
        btn_pol = styled_button("‚ûï –ü–æ–ª–∏—Å", tooltip="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∏—Å", shortcut="Ctrl+N")
        btn_pol.clicked.connect(self._on_add_policy)
        hlayout.addWidget(btn_pol)

        btn_import = styled_button(
            "üì• –ò–º–ø–æ—Ä—Ç –∏–∑ JSON", tooltip="–ò–º–ø–æ—Ä—Ç –ø–æ–ª–∏—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º"
        )
        btn_import.clicked.connect(self._on_import_policy_json)
        hlayout.addWidget(btn_import)

        hlayout.addStretch()
        pol_l.addLayout(hlayout)

        pol_view = PolicyTableView(
            parent=self,
            deal_id=self.instance.id,
        )
        pol_view.load_data()
        pol_l.addWidget(pol_view)

        self.tabs.addTab(pol_tab, "–ü–æ–ª–∏—Å—ã")

        # 3) –ü–ª–∞—Ç–µ–∂–∏
        pay_tab = QWidget()
        pay_l = QVBoxLayout(pay_tab)
        btn_pay = styled_button(
            "‚ûï –ü–ª–∞—Ç—ë–∂", tooltip="–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂", shortcut="Ctrl+Shift+N"
        )
        btn_pay.clicked.connect(self._on_add_payment)
        payments = list(get_payments_by_deal_id(self.instance.id))

        pay_view = PaymentTableView(
            parent=self,
            deal_id=self.instance.id,
        )
        pay_view.load_data()
        pay_l.addWidget(pay_view)

        self.tabs.addTab(pay_tab, "–ü–ª–∞—Ç–µ–∂–∏")

        # 4) –î–æ—Ö–æ–¥—ã
        from ui.views.income_table_view import IncomeTableView

        income_tab = QWidget()
        income_layout = QVBoxLayout(income_tab)

        btn_income = styled_button("‚ûï –î–æ—Ö–æ–¥", tooltip="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
        btn_income.clicked.connect(self._on_add_income)
        has_payments = len(get_payments_by_deal_id(self.instance.id)) > 0
        btn_income.setEnabled(has_payments)
        if not has_payments:
            btn_income.setToolTip("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏")
        income_layout.addWidget(btn_income, alignment=Qt.AlignLeft)

        income_view = IncomeTableView(parent=self, deal_id=self.instance.id)
        income_view.load_data()
        income_layout.addWidget(income_view)

        self.tabs.addTab(income_tab, "–î–æ—Ö–æ–¥—ã")

        # 5) –†–∞—Å—Ö–æ–¥—ã
        from ui.views.expense_table_view import ExpenseTableView

        expense_tab = QWidget()
        expense_layout = QVBoxLayout(expense_tab)
        btn_expense = styled_button("‚ûï –†–∞—Å—Ö–æ–¥", tooltip="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
        btn_expense.clicked.connect(self._on_add_expense)
        expense_layout.addWidget(btn_expense, alignment=Qt.AlignLeft)

        expense_view = ExpenseTableView(parent=self, deal_id=self.instance.id)
        expense_view.load_data()
        expense_layout.addWidget(expense_view)

        self.tabs.addTab(expense_tab, "–†–∞—Å—Ö–æ–¥—ã")

        # 4) –ó–∞–¥–∞—á–∏ ‚Äî –≤–Ω–µ–¥—Ä—è–µ–º TaskTableView —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–¥–µ–ª–∫–µ
        # ‚îÄ‚îÄ‚îÄ –ó–∞–¥–∞—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        task_tab = QWidget()
        vbox = QVBoxLayout(task_tab)

        btn_add_task = styled_button("‚ûï –ó–∞–¥–∞—á–∞", tooltip="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        btn_add_task.clicked.connect(self._on_add_task)
        vbox.addWidget(btn_add_task, alignment=Qt.AlignLeft)

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –∑–∞–¥–∞—á–∏ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏
        from services.task_service import get_tasks_by_deal

        tasks = list(get_tasks_by_deal(self.instance.id))

        task_view = TaskTableView(parent=self, deal_id=self.instance.id)
        vbox.addWidget(task_view)
        self.task_view = task_view

        task_view.set_model_class_and_items(Task, tasks, total_count=len(tasks))
        sel = task_view.table.selectionModel()
        if sel:
            sel.selectionChanged.connect(task_view._update_actions_state)
            task_view._update_actions_state()

        task_view.table.setSortingEnabled(True)
        task_view.row_double_clicked.connect(self._on_task_double_clicked)

        self.tabs.addTab(task_tab, "–ó–∞–¥–∞—á–∏")
        self.task_view = task_view  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è refresh

    def _init_actions(self):
        box = QHBoxLayout()
        box.addStretch()
        btn_edit = styled_button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", shortcut="Ctrl+E")
        btn_edit.clicked.connect(self._on_edit)
        box.addWidget(btn_edit)
        btn_folder = styled_button("üìÇ –ü–∞–ø–∫–∞")
        btn_folder.clicked.connect(self._open_folder)
        box.addWidget(btn_folder)
        btn_copy = styled_button("üìã", tooltip="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ")
        btn_copy.clicked.connect(self._copy_folder_path)
        box.addWidget(btn_copy)
        btn_wa = styled_button("üí¨ WhatsApp")
        btn_wa.clicked.connect(self._open_whatsapp)
        box.addWidget(btn_wa)
        btn_prev = styled_button("‚óÄ –ù–∞–∑–∞–¥")
        btn_prev.clicked.connect(self._on_prev_deal)
        box.addWidget(btn_prev)

        btn_next = styled_button("‚ñ∂ –î–∞–ª–µ–µ")
        btn_next.clicked.connect(self._on_next_deal)
        box.addWidget(btn_next)
        self.layout.addLayout(box)
        if not self.instance.is_closed:
            btn_close = styled_button("üîí –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É")
            btn_close.clicked.connect(self._on_close_deal)
            box.addWidget(btn_close)

    def _on_edit(self):
        form = DealForm(self.instance, parent=self)
        if form.exec():
            self._init_kpi_panel()
            self._init_tabs()

    def _on_add_policy(self):
        """
        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–ª–∏—Å –∫ –¢–ï–ö–£–©–ï–ô —Å–¥–µ–ª–∫–µ:
        ‚Äì –∫–ª–∏–µ–Ω—Ç –∏ —Å–¥–µ–ª–∫–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,
        –∫–ª–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è, —Å–¥–µ–ª–∫—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.
        """
        form = PolicyForm(
            parent=self,
            forced_client=self.instance.client,
            forced_deal=self.instance,
        )
        if form.exec():
            self._init_tabs()  # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å KPI + —Ç–∞–±–ª–∏—Ü—ã

    def _on_add_payment(self):
        form = PaymentForm(parent=self)
        if form.exec():
            self._init_tabs()

    def _on_add_task(self):
        form = TaskForm(parent=self, forced_deal=self.instance)
        # –ø—Ä–µ—Ñ–∏–ª–ª –ø–æ —Å–¥–µ–ª–∫–µ
        if hasattr(form, "deal_combo"):
            idx = form.deal_combo.findData(self.instance.id)
            if idx >= 0:
                form.deal_combo.setCurrentIndex(idx)
        if form.exec():
            self.task_view.refresh()  # –∑–∞–≥—Ä—É–∑–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å–¥–µ–ª–∫–∏
            self._init_kpi_panel()

    def _open_folder(self):
        open_folder(
            self.instance.drive_folder_path or self.instance.drive_folder_link,
            parent=self,  # QWidget, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å QMessageBox-—ã
        )

    def _copy_folder_path(self):
        copy_path_to_clipboard(
            self.instance.drive_folder_path or self.instance.drive_folder_link,
            parent=self,
        )

    def _open_whatsapp(self):
        from services.client_service import format_phone_for_whatsapp, open_whatsapp

        phone = self.instance.client.phone
        if phone:
            open_whatsapp(format_phone_for_whatsapp(phone))

    def _on_inline_save(self):
        from services.deal_service import update_deal

        status = self.status_edit.toPlainText().strip()
        reminder = (
            self.reminder_date.date().toPython()
            if self.reminder_date.date().isValid()
            else None
        )
        new_calc_part = self.calc_append.toPlainText().strip()
        if reminder:
            delta = abs(reminder - date.today())
            if delta > timedelta(days=31):
                if not confirm(
                    f"–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –º–µ—Å—è—Ü.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {reminder:%d.%m.%Y}?"
                ):
                    return

        try:
            update_deal(
                self.instance,
                status=status or None,
                reminder_date=reminder,
                calculations=new_calc_part or None,
            )
            self.calc_append.clear()
            self.calc_view.setPlainText(self.instance.calculations or "‚Äî")
        except Exception as e:
            from ui.common.message_boxes import show_error

            show_error(str(e))

    def _on_task_double_clicked(self, task):
        form = TaskForm(task, parent=self)
        if form.exec():
            self.task_view.refresh()
            self._init_kpi_panel()

    def _on_add_income(self):
        dlg = IncomeForm(parent=self, deal_id=self.instance.id)
        if dlg.exec():
            self._init_tabs()  # –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    def _on_prev_deal(self):
        prev = get_prev_deal(self.instance)
        if prev:
            self.close()
            DealDetailView(prev).exec()

    def _on_next_deal(self):
        next_ = get_next_deal(self.instance)
        if next_:
            self.close()
            DealDetailView(next_).exec()

    def _on_add_expense(self):
        from ui.forms.expense_form import ExpenseForm

        dlg = ExpenseForm(parent=self, deal_id=self.instance.id)
        if dlg.exec():
            self._init_tabs()  # —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—Ö–æ–¥–æ–≤

    def _on_close_deal(self):
        dlg = CloseDealDialog(self)
        if dlg.exec() == QDialog.Accepted:
            reason = dlg.get_reason()
            if not reason:
                from ui.common.message_boxes import show_error

                show_error("–ü—Ä–∏—á–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.")
                return
            update_deal(self.instance, is_closed=True, closed_reason=reason)
            from ui.common.message_boxes import show_info

            show_info("–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
            self.close()
            DealDetailView(self.instance).exec()

    def _on_import_policy_json(self):
        dlg = ImportPolicyJsonForm(parent=self)
        if dlg.exec():
            self._init_tabs()


class CloseDealDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏")
        self.setModal(True)

        layout = QVBoxLayout(self)
        layout.addWidget(QLabel("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è:"))
        self.reason_edit = QTextEdit()
        layout.addWidget(self.reason_edit)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

    def get_reason(self):
        return self.reason_edit.toPlainText().strip()
