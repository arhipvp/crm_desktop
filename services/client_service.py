"""–°–µ—Ä–≤–∏—Å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏."""

import logging
import re
import urllib.parse
import webbrowser
from peewee import ModelSelect

from database.models import Client, db
from services.folder_utils import create_client_drive_folder, rename_client_folder
from services.validators import normalize_phone, normalize_full_name

logger = logging.getLogger(__name__)

CLIENT_ALLOWED_FIELDS = {"name", "phone", "email", "is_company", "note"}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–ª—É—á–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def get_all_clients() -> ModelSelect:
    """–í–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä–∫—É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    return Client.select().where(Client.is_deleted == False)


def get_client_by_id(client_id: int) -> Client | None:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""
    return Client.get_or_none((Client.id == client_id) & (Client.is_deleted == False))


def get_clients_page(
    page: int,
    per_page: int,
    search_text: str = "",
    show_deleted: bool = False,
) -> ModelSelect:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    query = Client.select()
    query = apply_client_filters(query, search_text, show_deleted)

    offset = (page - 1) * per_page
    return query.order_by(Client.name.asc()).limit(per_page).offset(offset)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def add_client(**kwargs) -> Client:
    """–°–æ–∑–¥–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    allowed_fields = CLIENT_ALLOWED_FIELDS

    clean_data = {
        key: kwargs[key]
        for key in allowed_fields
        if key in kwargs and kwargs[key] not in ("", None)
    }

    name = clean_data.get("name")
    if not name:
        logger.warning("‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –∏–º–µ–Ω–∏")
        raise ValueError("–ü–æ–ª–µ 'name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
    name = normalize_full_name(name)
    clean_data["name"] = name

    if "phone" in clean_data:
        try:
            clean_data["phone"] = normalize_phone(clean_data["phone"])
        except ValueError as e:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '%s': %s", clean_data["phone"], e)
            raise

    clean_data["is_deleted"] = False

    with db.atomic():
        client, _ = Client.get_or_create(name=name, defaults=clean_data)

        try:
            folder_path, folder_link = create_client_drive_folder(name)
            client.drive_folder_path = folder_path
            client.drive_folder_link = folder_link
            client.save()
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –≤ Drive: %s", e)

        return client


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def update_client(client: Client, **kwargs) -> Client:
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏."""
    updates = {k: v for k, v in kwargs.items() if k in CLIENT_ALLOWED_FIELDS and v not in ("", None)}

    if "name" in updates:
        updates["name"] = normalize_full_name(updates["name"])
    if "phone" in updates:
        updates["phone"] = normalize_phone(updates["phone"])

    if not updates:
        return client

    logger.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ #%s: %s", client.id, updates)

    old_name = client.name
    new_name = updates.get("name", old_name)

    for k, v in updates.items():
        setattr(client, k, v)
    client.save()

    if old_name != new_name:
        new_path, new_link = rename_client_folder(old_name, new_name, client.drive_folder_link)
        if new_path and new_path != client.drive_folder_path:
            client.drive_folder_path = new_path
            logger.info("üìÅ –û–±–Ω–æ–≤–ª—ë–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: %s", new_path)
        if new_link and new_link != client.drive_folder_link:
            client.drive_folder_link = new_link
            logger.info("üîó –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Drive: %s", new_link)
        client.save(only=[Client.drive_folder_path, Client.drive_folder_link])

    return client


def apply_client_filters(
    query: ModelSelect, search_text: str, show_deleted: bool
) -> ModelSelect:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫ –≤—ã–±–æ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    if not show_deleted:
        query = query.where(Client.is_deleted == False)
    if search_text:
        query = query.where(
            (Client.name.contains(search_text))
            | (Client.phone.contains(search_text))
            | (Client.email.contains(search_text))
            | (Client.note.contains(search_text))
        )
    return query


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¥–∞–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def mark_client_deleted(client_id: int):
    """–ü–æ–º–µ—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ."""
    client = Client.get_or_none(Client.id == client_id)
    if client:
        client.is_deleted = True
        client.save()
    else:
        logger.warning("‚ùó –ö–ª–∏–µ–Ω—Ç —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", client_id)


def mark_clients_deleted(client_ids: list[int]) -> int:
    """–ú–∞—Å—Å–æ–≤–æ –ø–æ–º–µ—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —É–¥–∞–ª—ë–Ω–Ω—ã–º–∏."""
    if not client_ids:
        return 0
    return (
        Client.update(is_deleted=True)
        .where(Client.id.in_(client_ids))
        .execute()
    )


def restore_client(client_id: int):
    """–°–Ω–∏–º–∞–µ—Ç –ø–æ–º–µ—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞."""
    client = Client.get_or_none(Client.id == client_id)
    if client:
        client.is_deleted = False
        client.save()
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç %s –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", client_id)
    else:
        logger.warning("‚ùó –ö–ª–∏–µ–Ω—Ç —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", client_id)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def format_phone_for_whatsapp(phone: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–≥–æ–¥–Ω–æ–º –¥–ª—è WhatsApp."""
    return normalize_phone(phone)


def open_whatsapp(phone: str, message: str | None = None) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç WhatsApp –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    digits = re.sub(r"\D", "", phone or "")
    if not digits:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

    url = f"https://wa.me/{digits}"
    if message:
        url += "?text=" + urllib.parse.quote(message)

    webbrowser.open(url)


def build_client_query(search_text: str = "", show_deleted: bool = False):
    """–°–æ–∑–¥–∞—ë—Ç –≤—ã–±–æ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    query = Client.select()
    return apply_client_filters(query, search_text, show_deleted)
