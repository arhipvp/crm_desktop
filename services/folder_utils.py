"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ –∏ Google Drive."""

from __future__ import annotations

import logging
# services/folder_utils.py
import os
import re
import subprocess
import sys
import webbrowser
from functools import lru_cache
from typing import Optional, Tuple

try:
    from google.oauth2.service_account import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaFileUpload
except Exception:  # noqa: BLE001
    Credentials = None  # type: ignore[assignment]
    build = lambda *a, **k: None  # type: ignore[assignment]
    MediaFileUpload = None  # type: ignore[assignment]

try:
    from PySide6.QtWidgets import QApplication, QMessageBox
except Exception:  # PySide6 –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
    QApplication = None  # type: ignore[assignment]
    QMessageBox = None

logger = logging.getLogger(__name__)

SERVICE_ACCOUNT_FILE = os.getenv("GOOGLE_CREDENTIALS", "credentials.json")
SCOPES = ["https://www.googleapis.com/auth/drive"]
ROOT_FOLDER_ID = "1-hTRZ7meDTGDQezoY_ydFkmXIng3gXFm"  # ID –ø–∞–ø–∫–∏ –≤ Google Drive
GOOGLE_DRIVE_LOCAL_ROOT = os.getenv("GOOGLE_DRIVE_LOCAL_ROOT", r"G:\–ú–æ–π –¥–∏—Å–∫\–ö–ª–∏–µ–Ω—Ç—ã")




@lru_cache(maxsize=1)
def get_drive_service():
    """–°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å Google Drive.

    Returns:
        Resource: –ö–ª–∏–µ–Ω—Ç API Google Drive.
    """
    if Credentials is None:
        raise RuntimeError("Google Drive libraries are not available")
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    return build("drive", "v3", credentials=creds)

def sanitize_name(name: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª—ã: < > : "  –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ/–Ω–µ–≤–∏–¥–∏–º—ã–µ.
    """
    import re
    name = re.sub(r'[<>:"/\\|?*\n\r\t]', '_', name)  # –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    name = re.sub(r'\s{2,}', ' ', name).strip()      # —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    return name.rstrip(' .')                         # —É–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã/—Ç–æ—á–∫–∏


def extract_folder_id(link: str) -> str:
    if not link:
        return None
    return link.rstrip("/").split("/")[-1]

def create_drive_folder(folder_name: str, parent_id: str = ROOT_FOLDER_ID) -> str:
    folder_name = sanitize_name(folder_name)
    service = get_drive_service()

    query = f"'{parent_id}' in parents and name = '{folder_name}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
    response = service.files().list(q=query, fields="files(id)", spaces='drive').execute()
    files = response.get("files", [])

    if files:
        folder_id = files[0]["id"]
        return f"https://drive.google.com/drive/folders/{folder_id}"

    metadata = {
        "name": folder_name,
        "mimeType": "application/vnd.google-apps.folder",
        "parents": [parent_id]
    }

    folder = service.files().create(body=metadata, fields="id").execute()
    return f"https://drive.google.com/drive/folders/{folder['id']}"

def create_client_drive_folder(client_name: str) -> tuple[str, str]:
    """–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –≤–µ–±-—Å—Å—ã–ª–∫—É)."""
    safe_name = sanitize_name(client_name)
    local_path = os.path.join(GOOGLE_DRIVE_LOCAL_ROOT, safe_name)

    try:
        os.makedirs(local_path, exist_ok=True)
    except Exception as e:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞: %s", e)

        return None, None

    # –°–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç–æ—è—â—É—é –ø–∞–ø–∫—É –≤ Google –î–∏—Å–∫–µ
    web_link = create_drive_folder(safe_name)
    return local_path, web_link


def open_local_or_web(folder_link: str, folder_name: str = None, parent=None):
    logger.debug(">>> [open_local_or_web] folder_link:", folder_link)

    if not folder_link and not folder_name:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏.")
        return

    if not folder_name:
        folder_name = "???"  # fallback –∏–º—è

    client_path = os.path.join(GOOGLE_DRIVE_LOCAL_ROOT, folder_name)
    logger.debug(">>> [search] checking client path: %s", client_path)

    if os.path.isdir(client_path):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
        for sub in os.listdir(client_path):
            sub_path = os.path.join(client_path, sub)
            if os.path.isdir(sub_path) and (sub == folder_name or sub.endswith(folder_name)):
                logger.debug(">>> [match] found subfolder: %s", sub_path)
                os.startfile(sub_path)
                return

        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–º—É –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(">>> [fallback] opening client root folder: %s", client_path)
        os.startfile(client_path)
        return

    # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å web-—Å—Å—ã–ª–∫–∞
    if folder_link:
        logger.info(">>> [fallback] opening web link: %s", folder_link)
        webbrowser.open(folder_link)
    else:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞: {folder_name}")



def create_deal_folder(
    client_name: str,
    deal_description: str,
    *,
    client_drive_link: str | None,          # ‚Üê —Å—Å—ã–ª–∫–∞ –Ω–∞ –ü–ê–ü–ö–£ –ö–õ–ò–ï–ù–¢–ê
) -> Tuple[str, Optional[str]]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –Ω–∞ –¥–∏—Å–∫–µ –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å client_drive_link)
    –ø–æ–¥–ø–∞–ø–∫—É ¬´–°–¥–µ–ª–∫–∞ - ‚Ä¶¬ª –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ Google Drive.

    Returns
    -------
    (local_path, web_link or None)
    """
    # -------- –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–¥–µ–ª–∫–∏
    deal_name   = sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")

    # -------- –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å  G:\‚Ä¶\–ö–ª–∏–µ–Ω—Ç—ã\<–ö–ª–∏–µ–Ω—Ç>\–°–¥–µ–ª–∫–∞ - ‚Ä¶
    local_path = os.path.join(
        GOOGLE_DRIVE_LOCAL_ROOT,
        sanitize_name(client_name),
        deal_name,
    )
    os.makedirs(local_path, exist_ok=True)
    logger.info("üìÇ  –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏: %s", local_path)

    # -------- –æ–±–ª–∞–∫–æ: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    web_link: Optional[str] = None
    if client_drive_link:
        try:
            parent_id = extract_folder_id(client_drive_link)       # ID –ø–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
            web_link  = create_drive_folder(deal_name, parent_id)  # –ø–æ–¥–ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏
            logger.info("‚òÅÔ∏è  Drive-–ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏: %s", web_link)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –Ω–∞ Drive")

    return local_path, web_link



def create_policy_folder(client_name: str, policy_number: str, deal_description: str = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª–∏—Å–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∫–∏."""
    client_name = sanitize_name(client_name)
    policy_name = sanitize_name(f"–ü–æ–ª–∏—Å - {policy_number}")

    if deal_description:
        deal_name = sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")
        path = os.path.join(GOOGLE_DRIVE_LOCAL_ROOT, client_name, deal_name, policy_name)
    else:
        path = os.path.join(GOOGLE_DRIVE_LOCAL_ROOT, client_name, policy_name)

    try:
        os.makedirs(path, exist_ok=True)
        return path
    except Exception as e:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞: %s", e)

        return None

def upload_to_drive(local_path: str, drive_folder_id: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ Google Drive –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
    """
    from googleapiclient.http import MediaFileUpload

    service = get_drive_service()  # ‚Üê –≤–º–µ—Å—Ç–æ get_gdrive_credentials

    file_metadata = {
        "name": os.path.basename(local_path),
        "parents": [drive_folder_id]
    }
    media = MediaFileUpload(local_path, resumable=True)

    uploaded = service.files().create(
        body=file_metadata,
        media_body=media,
        fields="id, webViewLink"
    ).execute()

    logger.info("‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω: %s", uploaded['webViewLink'])
    return uploaded["webViewLink"]

def open_folder(path_or_url: str, *, parent: Optional["QWidget"] = None) -> None:  # noqa: N802 (keep API)
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –∏–Ω–∞—á–µ ‚Äî –∫–∞–∫ URL.

    Parameters
    ----------
    path_or_url: str
        –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É **–∏–ª–∏** web‚Äë—Å—Å—ã–ª–∫–∞.
    parent: QWidget | None
        –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç –¥–ª—è QMessageBox; –º–æ–∂–µ—Ç –±—ã—Ç—å None –≤–Ω–µ Qt.
    """
    if not path_or_url:
        _msg("–ü–∞–ø–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.", parent)
        return

    path_or_url = path_or_url.strip()

    if os.path.isdir(path_or_url):  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            if sys.platform.startswith("win"):
                os.startfile(path_or_url)  # type: ignore[attr-defined]
            elif sys.platform.startswith("darwin"):
                subprocess.Popen(["open", path_or_url])
            else:
                subprocess.Popen(["xdg-open", path_or_url])
            return
        except Exception as exc:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ %s", path_or_url)
            _msg(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:\n{exc}", parent)
            return

    # –∏–Ω–∞—á–µ —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ URL
    webbrowser.open(path_or_url)

def _msg(text: str, parent: Optional["QWidget"]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ QMessageBox, –µ—Å–ª–∏ Qt –¥–æ—Å—Ç—É–ø–µ–Ω."""
    if QMessageBox is None or QApplication is None or QApplication.instance() is None:
        logger.info("MSG: %s", text)
        return
    QMessageBox.information(parent, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", text)


def rename_client_folder(old_name: str, new_name: str, drive_link: str | None):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ Google Drive.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
        (–Ω–æ–≤—ã–π_–ª–æ–∫–∞–ª—å–Ω—ã–π_–ø—É—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–∞—è_web-—Å—Å—ã–ª–∫–∞_–∏–ª–∏_None)
    """
    # 1) –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∏—Å–∫ -------------------------------------------------
    old_path = os.path.join(GOOGLE_DRIVE_LOCAL_ROOT, old_name)
    new_path = os.path.join(GOOGLE_DRIVE_LOCAL_ROOT, new_name)

    try:
        if os.path.isdir(old_path):
            # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å new_path, –∑–Ω–∞—á–∏—Ç –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if not os.path.isdir(new_path):
                os.rename(old_path, new_path)
        else:
            # —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç ‚Üí –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é (—á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å)
            os.makedirs(new_path, exist_ok=True)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞")

    # 2) Google Drive ---------------------------------------------------
    if drive_link:
        try:
            service = get_drive_service()
            file_id = extract_folder_id(drive_link)
            service.files().update(
                fileId=file_id,
                body={"name": new_name},
                fields="id"          # –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
            ).execute()
            # —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ .../folders/<id> –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π ‚Üí –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ Drive")

    return new_path, drive_link

