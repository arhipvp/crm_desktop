"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ –∏ Google Drive."""

from __future__ import annotations

import logging
import os
import shutil
import subprocess
import sys
import webbrowser
from pathlib import Path
from typing import Optional, Tuple

from infrastructure.drive_gateway import DriveGateway, sanitize_drive_name

logger = logging.getLogger(__name__)


def sanitize_name(name: str) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∞–ª–∏–∞—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º—ë–Ω –ø—É—Ç–µ–π."""

    return sanitize_drive_name(name)


def extract_folder_id(link: str | None) -> str | None:
    """–ò–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–ø–∫–∏ –∏–∑ —Å—Å—ã–ª–∫–∏ Google Drive."""

    if not link:
        return None

    return link.rstrip("/").split("/")[-1]


def is_drive_link(link: str | None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""

    if not link:
        return False

    link = link.strip()
    if not link:
        return False

    if "://" in link:
        return True

    from urllib.parse import urlparse

    parsed = urlparse(link if "//" in link else f"//{link}", scheme="")
    host = (parsed.netloc or parsed.path).lower()
    if "google" in host:
        return True

    return False


def _resolve_base_path(
    gateway: DriveGateway, base_path: str | os.PathLike[str] | None
) -> Path:
    return Path(base_path) if base_path is not None else gateway.local_root


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–±–æ—Ç–∞ —Å Google Drive ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def create_drive_folder(
    folder_name: str,
    *,
    gateway: DriveGateway,
    parent_id: str | None = None,
) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –Ω–∞ Google Drive –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É."""

    return gateway.create_drive_folder(folder_name, parent_id)


def find_drive_folder(
    folder_name: str,
    *,
    gateway: DriveGateway,
    parent_id: str | None = None,
) -> str | None:
    """–ù–∞–π—Ç–∏ –ø–∞–ø–∫—É –Ω–∞ Google Drive –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""

    return gateway.find_drive_folder(folder_name, parent_id)


def upload_to_drive(
    local_path: str | os.PathLike[str],
    drive_folder_id: str,
    *,
    gateway: DriveGateway,
) -> str:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É Google Drive –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É."""

    return gateway.upload_file(Path(local_path), drive_folder_id)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def create_client_drive_folder(
    client_name: str,
    *,
    gateway: DriveGateway,
    base_path: str | os.PathLike[str] | None = None,
) -> Tuple[str, Optional[str]]:
    """–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∏ —Å—Å—ã–ª–∫—É.

    Returns:
        tuple[str, Optional[str]]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π
        –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
    """

    safe_name = sanitize_name(client_name)
    root = _resolve_base_path(gateway, base_path)
    local_path = root / safe_name

    if local_path.exists():
        logger.info("–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", local_path)
    else:
        local_path.mkdir(parents=True, exist_ok=True)
        logger.info("–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: %s", local_path)

    return str(local_path), None


def create_deal_folder(
    client_name: str,
    deal_description: str,
    *,
    client_drive_link: str | None,
    gateway: DriveGateway,
    base_path: str | os.PathLike[str] | None = None,
) -> Tuple[str, Optional[str]]:
    """–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∏ —Å—Å—ã–ª–∫—É.

    Returns:
        tuple[str, Optional[str]]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ
        —Å–¥–µ–ª–∫–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞.
    """

    root = _resolve_base_path(gateway, base_path)
    deal_name = sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")
    local_path = root / sanitize_name(client_name) / deal_name

    if local_path.exists():
        logger.info("üìÇ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", local_path)
    else:
        local_path.mkdir(parents=True, exist_ok=True)
        logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏: %s", local_path)

    return str(local_path), None


def create_policy_folder(
    client_name: str,
    policy_number: str,
    deal_description: str | None = None,
    *,
    gateway: DriveGateway,
    base_path: str | os.PathLike[str] | None = None,
) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª–∏—Å–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ—ë –ø—É—Ç—å."""

    root = _resolve_base_path(gateway, base_path)
    client_root = root / sanitize_name(client_name)
    if deal_description:
        client_root /= sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")
    path = client_root / sanitize_name(f"–ü–æ–ª–∏—Å - {policy_number}")

    path.mkdir(parents=True, exist_ok=True)
    return str(path)


def open_folder(path_or_url: str) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏–ª–∏ URL."""

    if not path_or_url:
        raise ValueError("–ü—É—Ç—å –Ω–µ –∑–∞–¥–∞–Ω.")

    path_or_url = path_or_url.strip()
    path = Path(path_or_url)

    if path.is_dir():
        try:
            if sys.platform.startswith("win"):
                try:
                    import win32com.client  # type: ignore[import-not-found]

                    shell = win32com.client.Dispatch("Shell.Application")
                    target = str(path.resolve()).casefold()
                    for window in shell.Windows():
                        try:
                            current = str(
                                Path(window.Document.Folder.Self.Path).resolve()
                            ).casefold()
                            if current == target:
                                window.Visible = True
                                try:
                                    window.Focus()  # type: ignore[attr-defined]
                                except Exception:  # noqa: BLE001
                                    pass
                                return
                        except Exception:  # noqa: BLE001
                            continue
                    shell.Open(str(path))
                except Exception:  # noqa: BLE001
                    os.startfile(path)  # type: ignore[attr-defined]
            elif sys.platform.startswith("darwin"):
                subprocess.Popen(["open", str(path)])
            else:
                subprocess.Popen(["xdg-open", str(path)])
            return
        except Exception as exc:  # noqa: BLE001
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ %s", path)
            raise OSError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥: {exc}") from exc

    webbrowser.open(path_or_url)


def copy_path_to_clipboard(path_or_url: str) -> None:
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∏–ª–∏ —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""

    if not path_or_url:
        raise ValueError("–ü—É—Ç—å –Ω–µ –∑–∞–¥–∞–Ω.")

    try:
        from PySide6.QtGui import QGuiApplication
    except Exception as exc:  # noqa: BLE001
        raise RuntimeError("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") from exc

    app = QGuiApplication.instance()
    if app is None:
        raise RuntimeError("–ù–µ—Ç GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")

    app.clipboard().setText(path_or_url.strip())


def copy_text_to_clipboard(text: str) -> None:
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""

    if not text:
        raise ValueError("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")

    try:
        from PySide6.QtGui import QGuiApplication
    except Exception as exc:  # noqa: BLE001
        raise RuntimeError("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") from exc

    app = QGuiApplication.instance()
    if app is None:
        raise RuntimeError("–ù–µ—Ç GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")

    app.clipboard().setText(text)


def create_directory(path: str | os.PathLike[str]) -> Path:
    """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –ø—É—Ç—å."""

    directory = Path(path)
    if directory.exists():
        raise FileExistsError("–¢–∞–∫–∞—è –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    try:
        directory.mkdir(parents=True, exist_ok=False)
    except PermissionError as exc:
        raise PermissionError("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏.") from exc
    except OSError as exc:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É %s", directory)
        raise OSError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {exc}") from exc

    return directory


def rename_path(source: str | os.PathLike[str], new_name: str) -> Path:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç—å."""

    src_path = Path(source)
    if not src_path.exists():
        raise FileNotFoundError("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    name = new_name.strip()
    if not name:
        raise ValueError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    dst_path = src_path.with_name(name)
    if dst_path.exists():
        raise FileExistsError("–û–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    try:
        src_path.rename(dst_path)
    except PermissionError as exc:
        raise PermissionError("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.") from exc
    except OSError as exc:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å %s –≤ %s", src_path, dst_path)
        raise OSError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç: {exc}") from exc

    return dst_path


def delete_path(path: str | os.PathLike[str]) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥."""

    target = Path(path)
    if not target.exists():
        raise FileNotFoundError("–û–±—ä–µ–∫—Ç —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    try:
        if target.is_dir():
            shutil.rmtree(target)
        else:
            target.unlink()
    except PermissionError as exc:
        raise PermissionError("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.") from exc
    except OSError as exc:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å %s", target)
        raise OSError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç: {exc}") from exc


def rename_client_folder(
    old_name: str,
    new_name: str,
    drive_link: str | None,
    *,
    gateway: DriveGateway,
    base_path: str | os.PathLike[str] | None = None,
) -> Tuple[str, str | None]:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ Google Drive."""

    root = _resolve_base_path(gateway, base_path)
    old_path = root / sanitize_name(old_name)
    new_path = root / sanitize_name(new_name)

    try:
        if old_path.is_dir():
            if not new_path.is_dir():
                old_path.rename(new_path)
        else:
            new_path.mkdir(parents=True, exist_ok=True)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞")

    if drive_link:
        file_id = extract_folder_id(drive_link)
        if file_id:
            try:
                gateway.rename_drive_folder(file_id, new_name)
            except Exception:  # noqa: BLE001
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ Drive")

    return str(new_path), drive_link


def rename_deal_folder(
    old_client_name: str,
    old_description: str,
    new_client_name: str,
    new_description: str,
    drive_link: str | None,
    current_path: str | os.PathLike[str] | None = None,
    *,
    gateway: DriveGateway,
    base_path: str | os.PathLike[str] | None = None,
) -> Tuple[str, str | None]:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç—å."""

    root = _resolve_base_path(gateway, base_path)
    default_old_path = (
        root
        / sanitize_name(old_client_name)
        / sanitize_name(f"–°–¥–µ–ª–∫–∞ - {old_description}")
    )
    old_path = (
        Path(current_path)
        if current_path and Path(current_path).is_dir()
        else default_old_path
    )
    new_path = (
        root
        / sanitize_name(new_client_name)
        / sanitize_name(f"–°–¥–µ–ª–∫–∞ - {new_description}")
    )

    try:
        new_path.parent.mkdir(parents=True, exist_ok=True)
        if old_path.is_dir():
            if not new_path.is_dir():
                old_path.rename(new_path)
                logger.info("üìÇ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞: %s ‚Üí %s", old_path, new_path)
        elif not new_path.is_dir():
            new_path.mkdir(parents=True, exist_ok=True)
            logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏: %s", new_path)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏")

    if drive_link:
        file_id = extract_folder_id(drive_link)
        if file_id:
            try:
                gateway.rename_drive_folder(
                    file_id, sanitize_name(f"–°–¥–µ–ª–∫–∞ - {new_description}")
                )
            except Exception:  # noqa: BLE001
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –Ω–∞ Drive")

    return str(new_path), drive_link


def rename_policy_folder(
    old_client_name: str,
    old_policy_number: str,
    old_deal_desc: str | None,
    new_client_name: str,
    new_policy_number: str,
    new_deal_desc: str | None,
    drive_link: str | None,
    *,
    gateway: DriveGateway,
    base_path: str | os.PathLike[str] | None = None,
) -> Tuple[str, str | None]:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞."""

    root = _resolve_base_path(gateway, base_path)
    old_path = root / sanitize_name(old_client_name)
    if old_deal_desc:
        old_path /= sanitize_name(f"–°–¥–µ–ª–∫–∞ - {old_deal_desc}")
    old_path /= sanitize_name(f"–ü–æ–ª–∏—Å - {old_policy_number}")

    new_path = root / sanitize_name(new_client_name)
    if new_deal_desc:
        new_path /= sanitize_name(f"–°–¥–µ–ª–∫–∞ - {new_deal_desc}")
    new_path /= sanitize_name(f"–ü–æ–ª–∏—Å - {new_policy_number}")

    try:
        new_path.parent.mkdir(parents=True, exist_ok=True)
        if old_path.is_dir():
            if not new_path.is_dir():
                old_path.rename(new_path)
        else:
            new_path.mkdir(parents=True, exist_ok=True)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞")

    file_id = extract_folder_id(drive_link) if is_drive_link(drive_link) else None
    if file_id:
        try:
            gateway.rename_drive_folder(
                file_id, sanitize_name(f"–ü–æ–ª–∏—Å - {new_policy_number}")
            )
        except Exception:  # noqa: BLE001
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞ –Ω–∞ Drive")

    return str(new_path), drive_link


def move_policy_folder_to_deal(
    policy_path: str | None,
    client_name: str,
    deal_description: str,
    *,
    gateway: DriveGateway,
    base_path: str | os.PathLike[str] | None = None,
) -> str | None:
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞ –≤ –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏."""

    if not policy_path:
        return None

    root = _resolve_base_path(gateway, base_path)
    policy_name = Path(policy_path).name
    dest_dir = (
        root / sanitize_name(client_name) / sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")
    )
    dest_dir.mkdir(parents=True, exist_ok=True)
    new_path = dest_dir / policy_name

    try:
        shutil.move(policy_path, new_path)
        logger.info("üìÅ –ü–∞–ø–∫–∞ –ø–æ–ª–∏—Å–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞: %s", new_path)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞")
        return None

    return str(new_path)


def move_file_to_folder(
    file_path: str | os.PathLike[str],
    folder_path: str | os.PathLike[str],
) -> str | None:
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É."""

    src = Path(file_path)
    if not src.is_file():
        return None

    folder = Path(folder_path)
    folder.mkdir(parents=True, exist_ok=True)
    dest = folder / src.name

    try:
        shutil.move(str(src), dest)
        logger.info("üìÑ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω: %s", dest)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª")
        return None

    return str(dest)
