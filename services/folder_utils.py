"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ –∏ Google Drive."""

from __future__ import annotations

import logging

# services/folder_utils.py
import os
from os import getenv
import re
import shutil
import subprocess
import sys
import webbrowser
from functools import lru_cache
import time
from pathlib import Path
from typing import Optional, Tuple

try:
    from google.oauth2.service_account import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaFileUpload
except Exception:  # noqa: BLE001
    Credentials = None  # type: ignore[assignment]
    build = lambda *a, **k: None  # type: ignore[assignment]
    MediaFileUpload = None  # type: ignore[assignment]

try:
    from PySide6.QtWidgets import QApplication, QMessageBox
except Exception:  # PySide6 –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
    QApplication = None  # type: ignore[assignment]
    QMessageBox = None

logger = logging.getLogger(__name__)

SERVICE_ACCOUNT_FILE = getenv("GOOGLE_CREDENTIALS", "credentials.json")
SCOPES = ["https://www.googleapis.com/auth/drive"]
ROOT_FOLDER_ID = getenv(
    "GOOGLE_ROOT_FOLDER_ID", "1-hTRZ7meDTGDQezoY_ydFkmXIng3gXFm"
)  # ID –ø–∞–ø–∫–∏ –≤ Google Drive
GOOGLE_DRIVE_LOCAL_ROOT = Path(
    getenv("GOOGLE_DRIVE_LOCAL_ROOT", r"G:\–ú–æ–π –¥–∏—Å–∫\–ö–ª–∏–µ–Ω—Ç—ã")
)


@lru_cache(maxsize=1)
def get_drive_service():
    """–°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å Google Drive.

    Returns:
        Resource: –ö–ª–∏–µ–Ω—Ç API Google Drive.
    """
    if Credentials is None:
        raise RuntimeError("Google Drive libraries are not available")
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    return build("drive", "v3", credentials=creds)


def sanitize_name(name: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª—ã: < > : "  –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ/–Ω–µ–≤–∏–¥–∏–º—ã–µ.
    """
    name = re.sub(r'[<>:"/\\|?*\n\r\t]', "_", name)  # –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    name = re.sub(r"\s{2,}", " ", name).strip()  # —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    return name.rstrip(" .")  # —É–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã/—Ç–æ—á–∫–∏


def extract_folder_id(link: str | None) -> str | None:
    """–ò–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–ø–∫–∏ –∏–∑ —Å—Å—ã–ª–∫–∏ Google Drive."""

    if not link:
        return None

    return link.rstrip("/").split("/")[-1]


def create_drive_folder(folder_name: str, parent_id: str = ROOT_FOLDER_ID) -> str:
    folder_name = sanitize_name(folder_name)
    service = get_drive_service()

    query = f"'{parent_id}' in parents and name = '{folder_name}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
    response = (
        service.files().list(q=query, fields="files(id)", spaces="drive").execute()
    )
    files = response.get("files", [])

    if files:
        folder_id = files[0]["id"]
        return f"https://drive.google.com/drive/folders/{folder_id}"

    metadata = {
        "name": folder_name,
        "mimeType": "application/vnd.google-apps.folder",
        "parents": [parent_id],
    }

    folder = service.files().create(body=metadata, fields="id").execute()
    return f"https://drive.google.com/drive/folders/{folder['id']}"


def find_drive_folder(folder_name: str, parent_id: str = ROOT_FOLDER_ID) -> str | None:
    """–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É –≤ Google Drive –∏ –≤–µ—Ä–Ω—É—Ç—å webViewLink."""
    folder_name = sanitize_name(folder_name)
    service = get_drive_service()

    query = (
        f"'{parent_id}' in parents and name = '{folder_name}' and "
        "mimeType = 'application/vnd.google-apps.folder' and trashed = false"
    )
    response = (
        service.files()
        .list(q=query, fields="files(id, webViewLink)", spaces="drive")
        .execute()
    )
    files = response.get("files", [])
    if files:
        return files[0].get("webViewLink")
    return None


def create_client_drive_folder(client_name: str) -> Tuple[str, Optional[str]]:
    """–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ—ë –ø—É—Ç—å.

    –ü–∞–ø–∫–∞ –Ω–∞ Google Drive –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. ``web_link``
    –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç ``None``.
    """
    safe_name = sanitize_name(client_name)
    local_path = GOOGLE_DRIVE_LOCAL_ROOT / safe_name

    try:
        local_path.mkdir(parents=True, exist_ok=True)
        logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: %s", local_path)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ")

    return str(local_path), None


def open_local_or_web(folder_link: str, folder_name: str = None, parent=None):
    logger.debug(">>> [open_local_or_web] folder_link: %s", folder_link)

    if not folder_link and not folder_name:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏.")
        return

    if not folder_name:
        folder_name = "???"  # fallback –∏–º—è

    client_path = GOOGLE_DRIVE_LOCAL_ROOT / folder_name
    logger.debug(">>> [search] checking client path: %s", client_path)

    if client_path.is_dir():
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
        for sub_path in client_path.iterdir():
            if sub_path.is_dir() and (
                sub_path.name == folder_name or sub_path.name.endswith(folder_name)
            ):
                logger.debug(">>> [match] found subfolder: %s", sub_path)
                open_folder(str(sub_path), parent=parent)
                return

        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–º—É –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        logger.debug(">>> [fallback] opening client root folder: %s", client_path)
        open_folder(str(client_path), parent=parent)
        return

    # –õ–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç
    if QApplication is not None and QMessageBox is not None and QApplication.instance():
        res = QMessageBox.question(
            parent,
            "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É. –ü—Ä–∏–≤—è–∑–∞—Ç—å –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é?",
            QMessageBox.Yes | QMessageBox.Cancel,
        )
        if res == QMessageBox.Yes:
            try:
                from PySide6.QtWidgets import QFileDialog

                chosen = QFileDialog.getExistingDirectory(parent, "–£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞")
                if chosen:
                    open_folder(chosen, parent=parent)
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏")
        return

    # –ù–µ—Ç GUI –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if folder_link:
        logger.debug(">>> [fallback] opening web link: %s", folder_link)
        webbrowser.open(folder_link)
    else:
        if QMessageBox is not None:
            QMessageBox.warning(
                parent, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞: {folder_name}"
            )
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞: %s", folder_name)


def create_deal_folder(
    client_name: str,
    deal_description: str,
    *,
    client_drive_link: str | None,  # ‚Üê —Å—Å—ã–ª–∫–∞ –Ω–∞ –ü–ê–ü–ö–£ –ö–õ–ò–ï–ù–¢–ê
) -> Tuple[str, Optional[str]]:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ.

    –ü–∞–ø–∫–∞ –Ω–∞ Google Drive –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

    Returns
    -------
    Tuple[str, Optional[str]]
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ –∏ ``None`` –≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–∫–∏.
    """
    # -------- –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–¥–µ–ª–∫–∏
    deal_name = sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")

    # -------- –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å  G:\‚Ä¶\–ö–ª–∏–µ–Ω—Ç—ã\<–ö–ª–∏–µ–Ω—Ç>\–°–¥–µ–ª–∫–∞ - ‚Ä¶
    local_path = (
        GOOGLE_DRIVE_LOCAL_ROOT
        / sanitize_name(client_name)
        / deal_name
    )

    logger.info("üìÇ  –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å —Å–¥–µ–ª–∫–∏: %s", local_path)

    # -------- —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É (–∫–∞–∫ —É –ø–æ–ª–∏—Å–∞)
    if local_path.is_dir():
        logger.info("üìÇ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", local_path)
    else:
        _msg(f"–ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞:\n{local_path}", None)
        try:
            local_path.mkdir(parents=True, exist_ok=True)
            logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏: %s", local_path)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ")

    # -------- –æ–±–ª–∞–∫–æ –±–æ–ª–µ–µ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    return str(local_path), None


def create_policy_folder(
    client_name: str, policy_number: str, deal_description: str = None
) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª–∏—Å–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∫–∏."""
    client_name = sanitize_name(client_name)
    policy_name = sanitize_name(f"–ü–æ–ª–∏—Å - {policy_number}")

    if deal_description:
        deal_name = sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")
        path = (
            GOOGLE_DRIVE_LOCAL_ROOT / client_name / deal_name / policy_name
        )
    else:
        path = GOOGLE_DRIVE_LOCAL_ROOT / client_name / policy_name

    try:
        path.mkdir(parents=True, exist_ok=True)
        return str(path)
    except Exception as e:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞: %s", e)

        return None


def upload_to_drive(local_path: str, drive_folder_id: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ Google Drive –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
    """
    from googleapiclient.http import MediaFileUpload

    service = get_drive_service()  # ‚Üê –≤–º–µ—Å—Ç–æ get_gdrive_credentials

    file_metadata = {"name": Path(local_path).name, "parents": [drive_folder_id]}
    media = MediaFileUpload(str(local_path), resumable=True)

    uploaded = (
        service.files()
        .create(body=file_metadata, media_body=media, fields="id, webViewLink")
        .execute()
    )

    logger.info("‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω: %s", uploaded["webViewLink"])
    return uploaded["webViewLink"]


def open_folder(
    path_or_url: str, *, parent: Optional["QWidget"] = None
) -> None:  # noqa: N802 (keep API)
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –∏–Ω–∞—á–µ ‚Äî –∫–∞–∫ URL.

    Parameters
    ----------
    path_or_url: str
        –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É **–∏–ª–∏** web‚Äë—Å—Å—ã–ª–∫–∞.
    parent: QWidget | None
        –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç –¥–ª—è QMessageBox; –º–æ–∂–µ—Ç –±—ã—Ç—å None –≤–Ω–µ Qt.
    """
    if not path_or_url:
        _msg("–ü–∞–ø–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.", parent)
        return

    path_or_url = path_or_url.strip()
    path = Path(path_or_url)

    if path.is_dir():  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            if sys.platform.startswith("win"):
                try:
                    import win32com.client  # type: ignore[import-not-found]

                    shell = win32com.client.Dispatch("Shell.Application")
                    target = str(path.resolve()).casefold()
                    for window in shell.Windows():
                        try:
                            current = str(
                                Path(window.Document.Folder.Self.Path).resolve()
                            ).casefold()
                            if current == target:
                                window.Visible = True
                                try:
                                    window.Focus()  # type: ignore[attr-defined]
                                except Exception:
                                    pass
                                return
                        except Exception:
                            continue
                    shell.Open(str(path))
                except Exception:
                    os.startfile(path)  # type: ignore[attr-defined]
            elif sys.platform.startswith("darwin"):
                subprocess.Popen(["open", str(path)])
            else:
                subprocess.Popen(["xdg-open", str(path)])
            return
        except Exception as exc:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ %s", path)
            _msg(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:\n{exc}", parent)
            return

    # –∏–Ω–∞—á–µ —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ URL
    webbrowser.open(path_or_url)


def copy_path_to_clipboard(
    path_or_url: str, *, parent: Optional["QWidget"] = None
) -> None:
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∏–ª–∏ —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
    if not path_or_url:
        _msg("–ü–∞–ø–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.", parent)
        return

    path_or_url = path_or_url.strip()

    try:
        from PySide6.QtGui import QGuiApplication
    except Exception:  # PySide6 –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
        logger.info("Clipboard not available")
        return

    if QGuiApplication.instance() is None:
        logger.info("No GUI application for clipboard")
        return

    QGuiApplication.clipboard().setText(path_or_url)
    _msg("–ü—É—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.", parent)


def copy_text_to_clipboard(text: str, *, parent: Optional["QWidget"] = None) -> None:
    """–ö–æ–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
    if not text:
        _msg("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.", parent)
        return

    try:
        from PySide6.QtGui import QGuiApplication
    except Exception:  # –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
        logger.info("Clipboard not available")
        return

    if QGuiApplication.instance() is None:
        logger.info("No GUI application for clipboard")
        return

    QGuiApplication.clipboard().setText(text)
    _msg("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.", parent)


def _msg(text: str, parent: Optional["QWidget"]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ QMessageBox, –µ—Å–ª–∏ Qt –¥–æ—Å—Ç—É–ø–µ–Ω."""
    if QMessageBox is None or QApplication is None or QApplication.instance() is None:
        logger.debug("MSG: %s", text)
        return
    QMessageBox.information(parent, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", text)


def rename_client_folder(old_name: str, new_name: str, drive_link: str | None):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ Google Drive.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
        (–Ω–æ–≤—ã–π_–ª–æ–∫–∞–ª—å–Ω—ã–π_–ø—É—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–∞—è_web-—Å—Å—ã–ª–∫–∞_–∏–ª–∏_None)
    """
    # 1) –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∏—Å–∫ -------------------------------------------------
    old_path = GOOGLE_DRIVE_LOCAL_ROOT / old_name
    new_path = GOOGLE_DRIVE_LOCAL_ROOT / new_name

    try:
        if old_path.is_dir():
            # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å new_path, –∑–Ω–∞—á–∏—Ç –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if not new_path.is_dir():
                old_path.rename(new_path)
        else:
            # —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç ‚Üí –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é (—á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å)
            new_path.mkdir(parents=True, exist_ok=True)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞")

    # 2) Google Drive ---------------------------------------------------
    if drive_link:
        try:
            service = get_drive_service()
            file_id = extract_folder_id(drive_link)
            if file_id:
                service.files().update(
                    fileId=file_id,
                    body={"name": new_name},
                    fields="id",  # –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
                ).execute()
            # —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ .../folders/<id> –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π ‚Üí –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ Drive")

    return str(new_path), drive_link


def rename_deal_folder(
    old_client_name: str,
    old_description: str,
    new_client_name: str,
    new_description: str,
    drive_link: str | None,
    current_path: str | None = None,
):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏."""

    default_old_path = (
        GOOGLE_DRIVE_LOCAL_ROOT
        / sanitize_name(old_client_name)
        / sanitize_name(f"–°–¥–µ–ª–∫–∞ - {old_description}")
    )
    # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    old_path = (
        Path(current_path)
        if current_path and Path(current_path).is_dir()
        else default_old_path
    )
    new_path = (
        GOOGLE_DRIVE_LOCAL_ROOT
        / sanitize_name(new_client_name)
        / sanitize_name(f"–°–¥–µ–ª–∫–∞ - {new_description}")
    )

    try:
        new_path.parent.mkdir(parents=True, exist_ok=True)
        if old_path.is_dir():
            if not new_path.is_dir():
                old_path.rename(new_path)
                logger.info("üìÇ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞: %s ‚Üí %s", old_path, new_path)
            else:
                logger.info("üìÇ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ: %s", new_path)
        elif new_path.is_dir():
            # –ø–∞–ø–∫–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è)
            logger.info("üìÇ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ: %s", new_path)
        else:
            _msg(f"–ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {old_path}\n–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é.", None)
            new_path.mkdir(parents=True, exist_ok=True)
            logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏: %s", new_path)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏")

    if drive_link:
        try:
            service = get_drive_service()
            file_id = extract_folder_id(drive_link)
            if file_id:
                service.files().update(
                    fileId=file_id,
                    body={"name": sanitize_name(f"–°–¥–µ–ª–∫–∞ - {new_description}")},
                    fields="id",
                ).execute()
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ –Ω–∞ Drive")

    return new_path, drive_link


def rename_policy_folder(
    old_client_name: str,
    old_policy_number: str,
    old_deal_desc: str | None,
    new_client_name: str,
    new_policy_number: str,
    new_deal_desc: str | None,
    drive_link: str | None,
):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞."""

    old_path = GOOGLE_DRIVE_LOCAL_ROOT / sanitize_name(old_client_name)
    if old_deal_desc:
        old_path /= sanitize_name(f"–°–¥–µ–ª–∫–∞ - {old_deal_desc}")
    old_path /= sanitize_name(f"–ü–æ–ª–∏—Å - {old_policy_number}")

    new_path = GOOGLE_DRIVE_LOCAL_ROOT / sanitize_name(new_client_name)
    if new_deal_desc:
        new_path /= sanitize_name(f"–°–¥–µ–ª–∫–∞ - {new_deal_desc}")
    new_path /= sanitize_name(f"–ü–æ–ª–∏—Å - {new_policy_number}")

    try:
        new_path.parent.mkdir(parents=True, exist_ok=True)
        if old_path.is_dir():
            if not new_path.is_dir():
                old_path.rename(new_path)
        else:
            new_path.mkdir(parents=True, exist_ok=True)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞")

    if drive_link:
        try:
            service = get_drive_service()
            file_id = extract_folder_id(drive_link)
            if file_id:
                service.files().update(
                    fileId=file_id,
                    body={"name": sanitize_name(f"–ü–æ–ª–∏—Å - {new_policy_number}")},
                    fields="id",
                ).execute()
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞ –Ω–∞ Drive")

    return str(new_path), drive_link


def move_policy_folder_to_deal(
    policy_path: str | None,
    client_name: str,
    deal_description: str,
) -> str | None:
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞ –≤ –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏.

    Parameters
    ----------
    policy_path: str | None
        –¢–µ–∫—É—â–∏–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ–ª–∏—Å–∞.
    client_name: str
        –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏.
    deal_description: str
        –û–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏.

    Returns
    -------
    str | None
        –ù–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–ª–∏ ``None`` –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """

    if not policy_path:
        return None

    policy_name = Path(policy_path).name
    client_name = sanitize_name(client_name)
    deal_name = sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal_description}")
    dest_dir = GOOGLE_DRIVE_LOCAL_ROOT / client_name / deal_name
    dest_dir.mkdir(parents=True, exist_ok=True)
    new_path = dest_dir / policy_name

    try:
        shutil.move(policy_path, new_path)
        logger.info("üìÅ –ü–∞–ø–∫–∞ –ø–æ–ª–∏—Å–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞: %s", new_path)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞")
        return None

    return str(new_path)


def move_file_to_folder(file_path: str, folder_path: str) -> str | None:
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É.

    Parameters
    ----------
    file_path: str
        –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    folder_path: str
        –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.

    Returns
    -------
    str | None
        –ù–æ–≤—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞ –∏–ª–∏ ``None`` –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """

    if not file_path or not Path(file_path).is_file():
        return None

    folder = Path(folder_path)
    folder.mkdir(parents=True, exist_ok=True)
    dest = folder / Path(file_path).name

    try:
        shutil.move(file_path, dest)
        logger.info("üìÑ –§–∞–π–ª –ø–æ–ª–∏—Å–∞ –ø–µ—Ä–µ–º–µ—â—ë–Ω: %s", dest)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª–∏—Å–∞")
        return None

    return str(dest)
