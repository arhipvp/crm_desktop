"""–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á."""

import datetime as _dt
import logging

from peewee import JOIN
from playhouse.shortcuts import prefetch

from database.db import db
from database.models import Client, Deal, Policy, Task
from services.deal_service import refresh_deal_drive_link
from .task_states import IDLE, QUEUED, SENT


logger = logging.getLogger(__name__)


def queue_task(task_id: int):
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å (idle ‚Üí queued)."""
    with db.atomic():
        t = Task.active().where(Task.id == task_id).get_or_none()
        if t and t.dispatch_state == IDLE:
            t.dispatch_state = QUEUED
            t.queued_at = _dt.datetime.utcnow()
            t.save()
            logger.info("üì§ –ó–∞–¥–∞—á–∞ #%s –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å", t.id)
            try:
                from services.telegram_service import notify_admin

                notify_admin(f"üì§ –ó–∞–¥–∞—á–∞ #{t.id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
            except Exception:  # pragma: no cover - logging
                logger.debug("Failed to notify admin", exc_info=True)
        elif t:
            logger.info(
                "‚è≠ –ó–∞–¥–∞—á–∞ #%s –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: —Å–æ—Å—Ç–æ—è–Ω–∏–µ %s",
                t.id,
                t.dispatch_state,
            )


def get_clients_with_queued_tasks() -> list[Client]:
    """–í–µ—Ä–Ω—É—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ``queued``."""
    deal_clients = (
        Client.select()
        .distinct()
        .join(Deal)
        .join(Task)
        .where((Task.dispatch_state == QUEUED) & (Task.is_deleted == False))
    )
    policy_clients = (
        Client.select()
        .distinct()
        .join(Policy)
        .join(Task)
        .where((Task.dispatch_state == QUEUED) & (Task.is_deleted == False))
    )
    return list(deal_clients.union(policy_clients))


def _dispatch_tasks(
    filter_cond,
    chat_id: int,
    log_suffix: str,
    limit: int | None = 1,
) -> list[Task]:
    """–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ —É—Å–ª–æ–≤–∏—é –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ.

    Parameters:
        filter_cond: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á.
        chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∑–∞–¥–∞—á–∏.
        log_suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∂—É—Ä–Ω–∞–ª–∞.
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞—á, ``None`` ‚Äî –±–µ–∑
            –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.
    """
    with db.atomic():
        query = (
            Task.active()
            .select(Task.id)
            .join(Deal, JOIN.LEFT_OUTER)
            .switch(Task)
            .join(Policy, JOIN.LEFT_OUTER)
        )
        where_expr = Task.dispatch_state == QUEUED
        if filter_cond is not None:
            where_expr &= filter_cond
        query = query.where(where_expr).order_by(Task.queued_at.asc())
        if limit is not None:
            query = query.limit(limit)

        task_ids = list(dict.fromkeys(t.id for t in query))
        if not task_ids:
            logger.info("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏%s", log_suffix)
            return []

        base = Task.select().where(Task.id.in_(task_ids))
        task_list = list(prefetch(base, Deal, Policy, Client))
        for task in task_list:
            task.dispatch_state = SENT
            task.tg_chat_id = chat_id
            task.save()
            if task.deal:
                refresh_deal_drive_link(task.deal)
            logger.info(
                "üì¨ –ó–∞–¥–∞—á–∞ #%s –≤—ã–¥–∞–Ω–∞ –≤ Telegram%s: chat_id=%s",
                task.id,
                log_suffix,
                chat_id,
            )
        return task_list


def pop_next_by_client(chat_id: int, client_id: int) -> Task | None:
    """–í—ã–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É."""
    tasks = _dispatch_tasks(
        (Deal.client_id == client_id) | (Policy.client_id == client_id),
        chat_id,
        f" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}",
        limit=1,
    )
    return tasks[0] if tasks else None


def get_deals_with_queued_tasks(client_id: int) -> list[Deal]:
    """–í–µ—Ä–Ω—É—Ç—å —Å–¥–µ–ª–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏."""
    base = (
        Deal.select()
        .distinct()
        .join(Task)
        .where(
            (Task.dispatch_state == QUEUED)
            & (Task.is_deleted == False)
            & (Deal.client_id == client_id)
        )
    )
    return list(prefetch(base, Client))


def get_all_deals_with_queued_tasks() -> list[Deal]:
    """–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏."""
    base = (
        Deal.select()
        .distinct()
        .join(Task)
        .where((Task.dispatch_state == QUEUED) & (Task.is_deleted == False))
    )
    return list(prefetch(base, Client))


def pop_next_by_deal(chat_id: int, deal_id: int) -> Task | None:
    """–í—ã–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏."""
    tasks = _dispatch_tasks(
        Task.deal_id == deal_id,
        chat_id,
        f" –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}",
        limit=1,
    )
    return tasks[0] if tasks else None


def pop_all_by_deal(chat_id: int, deal_id: int) -> list[Task]:
    """–í—ã–¥–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏."""
    return _dispatch_tasks(
        Task.deal_id == deal_id,
        chat_id,
        f" –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}",
        limit=None,
    )


def pop_next(chat_id: int) -> Task | None:
    tasks = _dispatch_tasks(None, chat_id, "", limit=1)
    return tasks[0] if tasks else None


def return_to_queue(task_id: int):
    with db.atomic():
        t = Task.active().where(Task.id == task_id).get_or_none()
        if t and t.dispatch_state == SENT:
            t.dispatch_state = QUEUED
            t.tg_chat_id = None
            t.tg_message_id = None
            t.queued_at = _dt.datetime.utcnow()
            t.save()
            logger.info("‚Ü© –ó–∞–¥–∞—á–∞ #%s –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å", t.id)
            try:
                from services.telegram_service import notify_admin

                notify_admin(f"‚Ü© –ó–∞–¥–∞—á–∞ #{t.id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
            except Exception:  # pragma: no cover - logging
                logger.debug("Failed to notify admin", exc_info=True)


def get_queued_tasks_by_deal(deal_id: int) -> list[Task]:
    """–í–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏."""
    policy_subq = (
        Policy.select(Policy.id)
        .where(Policy.deal_id == deal_id)
    )

    base = (
        Task.active()
        .where(
            (Task.dispatch_state == QUEUED)
            & ((Task.deal_id == deal_id) | (Task.policy_id.in_(policy_subq)))
        )
    )
    return list(prefetch(base, Deal, Policy, Client))


def get_all_queued_tasks() -> list[Task]:
    """–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ``queued`` —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–µ–π."""
    base = (
        Task.active()
        .where(Task.dispatch_state == QUEUED)
        .order_by(Task.queued_at.asc())
    )
    return list(prefetch(base, Deal, Policy, Client))


def pop_task_by_id(chat_id: int, task_id: int) -> Task | None:
    """–í—ã–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ id, –µ—Å–ª–∏ –æ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏."""
    with db.atomic():
        task = (
            Task.active()
            .where((Task.id == task_id) & (Task.dispatch_state == QUEUED))
            .first()
        )
        if not task:
            return None

        task.dispatch_state = SENT
        task.tg_chat_id = chat_id
        task.save()

        result = list(
            prefetch(Task.select().where(Task.id == task.id), Deal, Policy, Client)
        )
        task = result[0] if result else None
        if task and task.deal:
            refresh_deal_drive_link(task.deal)
        return task


__all__ = [
    "queue_task",
    "get_clients_with_queued_tasks",
    "pop_next_by_client",
    "get_deals_with_queued_tasks",
    "get_all_deals_with_queued_tasks",
    "pop_next_by_deal",
    "pop_all_by_deal",
    "pop_next",
    "return_to_queue",
    "get_queued_tasks_by_deal",
    "get_all_queued_tasks",
    "pop_task_by_id",
]

