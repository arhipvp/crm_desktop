from __future__ import annotations

"""Deal service module ‚Äî CRUD‚Äë–æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ Deal.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:
‚Ä¢ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ create_deal_folder() —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ¬´–°–¥–µ–ª–∫–∞ - ‚Ä¶¬ª.
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ ``drive_folder_path`` (–æ–±–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å ``Deal``).
‚Ä¢ –£–¥–∞–ª—ë–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç DealStatus.
‚Ä¢ –¢–∏–ø–∏–∑–∞—Ü–∏—è –∏ –º–µ–ª–∫–∏–µ –ø—Ä–∞–≤–∫–∏ PEP¬†8.
"""
import logging
from datetime import date
from utils.time_utils import now_str

from peewee import ModelSelect  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

from database.db import db
from database.models import Client  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
from database.models import Deal, Policy, Task
from services.client_service import get_client_by_id
from services.folder_utils import (
    create_deal_folder,
    find_drive_folder,
    sanitize_name,
    extract_folder_id,
    Credentials,
)

logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–ª—É—á–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def get_all_deals():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏, –∫—Ä–æ–º–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–µ."""
    return Deal.select().where(Deal.is_deleted == False)


def get_open_deals():
    """–û—Ç–∫—Ä—ã—Ç—ã–µ (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ) —Å–¥–µ–ª–∫–∏, –Ω–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–µ."""
    return Deal.select().where((Deal.is_closed == False) & (Deal.is_deleted == False))


def get_deals_by_client_id(client_id: int):
    return Deal.select().where(
        (Deal.client_id == client_id) & (Deal.is_deleted == False)
    )


def get_deal_by_id(deal_id: int) -> Deal | None:
    return Deal.get_or_none((Deal.id == deal_id) & (Deal.is_deleted == False))


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def add_deal(**kwargs):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É.

    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ``client_id``, ``start_date``, ``description``.
    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞—ë—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ ¬´–°–¥–µ–ª–∫–∞ - ‚Ä¶¬ª –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞;
    –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ``deal.drive_folder_path``.
    """

    required_fields = {"client_id", "start_date", "description"}
    missing = [f for f in required_fields if not kwargs.get(f)]
    if missing:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing)}")

    client = get_client_by_id(kwargs["client_id"])
    if not client:
        raise ValueError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    allowed_fields = {
        "start_date",
        "status",
        "description",
        "calculations",
        "reminder_date",
        "is_closed",
        "closed_reason",
    }

    clean_data: dict = {
        key: kwargs[key]
        for key in allowed_fields
        if key in kwargs and kwargs[key] not in ("", None)
    }

    if "calculations" in clean_data:
        ts = now_str()
        clean_data["calculations"] = f"[{ts}]: {clean_data['calculations']}"

    # FK –∫–ª–∏–µ–Ω—Ç
    clean_data["client"] = client
    clean_data["is_deleted"] = False

    with db.atomic():
        deal: Deal = Deal.create(**clean_data)
        logger.info(
            "‚úÖ –°–¥–µ–ª–∫–∞ #%s —Å–æ–∑–¥–∞–Ω–∞: –∫–ª–∏–µ–Ω—Ç %s ‚Äî %s",
            deal.id,
            client.name,
            deal.description,
        )

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–¥–µ–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            local_path, web_link = create_deal_folder(
                client.name,
                deal.description,
                client_drive_link=client.drive_folder_link,
            )
            logger.info("üìÅ –ü–∞–ø–∫–∞ —Å–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–∞: %s", local_path)
            if web_link:
                logger.info("üîó Google Drive-—Å—Å—ã–ª–∫–∞ —Å–¥–µ–ª–∫–∏: %s", web_link)
            deal.drive_folder_path = local_path
            deal.drive_folder_link = web_link
            deal.save()
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Å–¥–µ–ª–∫–∏: %s", e)

        return deal


def add_deal_from_policy(policy: Policy) -> Deal:
    """–°–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∏—Å–∞ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª–∏—Å –∫ –Ω–µ–π."""

    parts = []
    if policy.insurance_type:
        parts.append(policy.insurance_type)
    if policy.vehicle_brand:
        brand = policy.vehicle_brand
        if policy.vehicle_model:
            brand += f" {policy.vehicle_model}"
        parts.append(brand)
    description = " ".join(parts).strip() or f"–ò–∑ –ø–æ–ª–∏—Å–∞ {policy.policy_number}"

    deal = add_deal(
        client_id=policy.client_id,
        start_date=policy.start_date,
        description=description,
        reminder_date=date.today(),
    )

    try:
        from services.folder_utils import move_policy_folder_to_deal

        new_path = move_policy_folder_to_deal(
            policy.drive_folder_link,
            policy.client.name,
            deal.description,
        )
        if new_path:
            policy.drive_folder_link = new_path
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –ø–æ–ª–∏—Å–∞")

    policy.deal = deal
    policy.save()
    return deal


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def update_deal(deal: Deal, *, journal_entry: str | None = None, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä ``journal_entry`` –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª ``Deal.calculations``.
    –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π ``calculations`` —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤
    —Ç–∞–±–ª–∏—Ü—É :class:`DealCalculation`.
    """

    allowed_fields = {
        "start_date",
        "status",
        "description",
        "reminder_date",
        "is_closed",
        "closed_reason",
        "client_id",
    }

    old_client_name = deal.client.name if deal.client_id else None
    old_desc = deal.description

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫—Ä–æ–º–µ calculations)
    updates: dict = {
        key: kwargs[key]
        for key in allowed_fields
        if key in kwargs and kwargs[key] not in ("", None)
    }

    # –°–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    if "client_id" in updates:
        client = get_client_by_id(updates.pop("client_id"))
        if not client:
            raise ValueError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        deal.client = client

    # calculations -> –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    new_calc: str | None = kwargs.get("calculations")
    new_note: str | None = journal_entry

    # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ‚Äî –ø–∏—à–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –∂—É—Ä–Ω–∞–ª
    if kwargs.get("is_closed") and kwargs.get("closed_reason"):
        reason = kwargs["closed_reason"]
        ts = now_str()
        auto_note = f"[{ts}]: –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        old = deal.calculations or ""
        deal.calculations = f"{auto_note}\n{old}"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
    if new_note:
        ts = now_str()
        entry = f"[{ts}]: {new_note}"
        old = deal.calculations or ""
        deal.calculations = f"{entry}\n{old}" if old else entry

    # –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–¥–µ–ª–∫—É –∫–∞–∫ –µ—Å—Ç—å
    if not updates and not new_calc and not new_note:
        return deal

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    for key, value in updates.items():
        setattr(deal, key, value)

    deal.save()

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
    new_client_name = deal.client.name if deal.client_id else None
    new_desc = deal.description
    if (
        (old_client_name and new_client_name and old_client_name != new_client_name)
        or old_desc != new_desc
    ):
        try:
            from services.folder_utils import rename_deal_folder

            new_path, _ = rename_deal_folder(
                old_client_name or "",
                old_desc,
                new_client_name or "",
                new_desc,
                deal.drive_folder_link,
                deal.drive_folder_path,
            )
            if new_path and new_path != deal.drive_folder_path:
                deal.drive_folder_path = new_path
                deal.save(only=[Deal.drive_folder_path, Deal.drive_folder_link])
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
    if new_calc:
        from services.calculation_service import add_calculation
        add_calculation(deal.id, note=new_calc)
    return deal


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¥–∞–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def mark_deal_deleted(deal_id: int):
    deal = Deal.get_or_none(Deal.id == deal_id)
    if deal:
        deal.is_deleted = True
        deal.save()
        try:
            from services.folder_utils import rename_deal_folder

            new_desc = f"{deal.description} deleted"
            new_path, _ = rename_deal_folder(
                deal.client.name,
                deal.description,
                deal.client.name,
                new_desc,
                deal.drive_folder_link,
                deal.drive_folder_path,
            )
            deal.description = new_desc
            deal.drive_folder_path = new_path
            deal.save(
                only=[Deal.description, Deal.drive_folder_path, Deal.is_deleted]
            )
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–π")
    else:
        logger.warning("‚ùó –°–¥–µ–ª–∫–∞ —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", deal_id)


def apply_deal_filters(
    query,
    search_text: str = "",
    show_deleted: bool = False,
    column_filters: dict[str, str] | None = None,
):
    if not show_deleted:
        query = query.where(Deal.is_deleted == False)
    if search_text:
        query = query.where(
            (Deal.description.contains(search_text))
            | (Deal.status.contains(search_text))
            | (Client.name.contains(search_text))
            | (Deal.calculations.contains(search_text))
        )
    from services.query_utils import apply_column_filters

    query = apply_column_filters(query, column_filters, Deal)
    return query


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞–≥–∏–Ω–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def get_deals_page(
    page: int,
    per_page: int,
    search_text: str = "",
    show_deleted: bool = False,
    order_by: str = "reminder_date",
    order_dir: str = "asc",
    column_filters: dict[str, str] | None = None,
    **filters,
) -> ModelSelect:
    """–í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–¥–µ–ª–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    query = build_deal_query(column_filters=column_filters, **filters)

    query = apply_deal_filters(query, search_text, show_deleted, column_filters)

    # üëâ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω order_by
    if order_by and hasattr(Deal, order_by):
        order_field = getattr(Deal, order_by)
        if order_dir == "desc":
            query = query.order_by(order_field.desc())
        else:
            query = query.order_by(order_field.asc())
    else:
        query = query.order_by(Deal.start_date.desc())

    from peewee import prefetch
    from database.models import DealExecutor, Executor

    offset = (page - 1) * per_page
    page_query = query.limit(per_page).offset(offset)
    items = list(prefetch(page_query, DealExecutor, Executor))
    for deal in items:
        ex = deal.executors[0].executor if getattr(deal, "executors", []) else None
        setattr(deal, "_executor", ex)
    return items


def get_open_deals_page(page: int = 1, per_page: int = 50) -> ModelSelect:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ."""
    return (
        Deal.select()
        .where((Deal.is_closed == False) & (Deal.is_deleted == False))
        .order_by(Deal.start_date.desc())
        .paginate(page, per_page)
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def get_policies_by_deal_id(deal_id: int) -> ModelSelect:
    """–í–µ—Ä–Ω—É—Ç—å –ø–æ–ª–∏—Å—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Å–¥–µ–ª–∫–µ."""
    return Policy.select().where(
        (Policy.deal == deal_id) & (Policy.is_deleted == False)
    )


def get_tasks_by_deal_id(deal_id: int) -> ModelSelect:
    """–í–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–¥–µ–ª–∫–æ–π."""
    return Task.select().where((Task.deal == deal_id) & (Task.is_deleted == False))


def build_deal_query(
    search_text: str = "",
    show_deleted: bool = False,
    show_closed: bool = False,
    column_filters: dict[str, str] | None = None,
) -> ModelSelect:
    """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º."""
    query = Deal.select().join(Client)

    query = apply_deal_filters(query, search_text, show_deleted, column_filters)

    if not show_closed:
        query = query.where(Deal.is_closed == False)

    return query


def get_next_deal(current_deal: Deal) -> Deal | None:
    """–ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é —Å–¥–µ–ª–∫—É –ø–æ –¥–∞—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    if current_deal.reminder_date is None:
        return None

    return (
        get_open_deals()
        .where(
            (Deal.reminder_date > current_deal.reminder_date)
            | (
                (Deal.reminder_date == current_deal.reminder_date)
                & (Deal.id > current_deal.id)
            )
        )
        .order_by(Deal.reminder_date.asc(), Deal.id.asc())
        .first()
    )


def get_prev_deal(current_deal: Deal) -> Deal | None:
    """–ù–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–¥–µ–ª–∫—É –ø–æ –¥–∞—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    if current_deal.reminder_date is None:
        return None

    return (
        get_open_deals()
        .where(
            (Deal.reminder_date < current_deal.reminder_date)
            | (
                (Deal.reminder_date == current_deal.reminder_date)
                & (Deal.id < current_deal.id)
            )
        )
        .order_by(Deal.reminder_date.desc(), Deal.id.desc())
        .first()
    )


def refresh_deal_drive_link(deal: Deal) -> None:
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –ø–∞–ø–∫–∏ —Å–¥–µ–ª–∫–∏ –Ω–∞ Google Drive."""
    if deal.drive_folder_link:
        return

    client_link = deal.client.drive_folder_link if deal.client else None
    if not client_link or Credentials is None:
        return

    try:
        deal_name = sanitize_name(f"–°–¥–µ–ª–∫–∞ - {deal.description}")
        parent_id = extract_folder_id(client_link)
        if not parent_id:
            return
        link = find_drive_folder(deal_name, parent_id)
        if link:
            deal.drive_folder_link = link
            deal.save(only=[Deal.drive_folder_link])
            logger.info("üîó –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å–¥–µ–ª–∫–∏ –Ω–∞ Drive: %s", link)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É —Å–¥–µ–ª–∫–∏ %s", deal.id)
