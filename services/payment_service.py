"""–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏."""

import logging
from datetime import date

from peewee import JOIN, ModelSelect  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
from peewee import fn

from database.models import Client, Expense, Income, Payment, Policy

logger = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ CRUD ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def get_all_payments() -> ModelSelect:
    """–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö.

    Returns:
        ModelSelect: –í—ã–±–æ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    return Payment.select().where(Payment.is_deleted == False)


def get_payments_by_policy_id(policy_id: int) -> ModelSelect:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–ª–∏—Å—É.

    Args:
        policy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª–∏—Å–∞.

    Returns:
        ModelSelect: –í—ã–±–æ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    return Payment.select().where(
        (Payment.policy_id == policy_id) & (Payment.is_deleted == False)
    )


def get_payment_by_id(payment_id: int) -> Payment | None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

    Args:
        payment_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞.

    Returns:
        Payment | None: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –∏–ª–∏ ``None``.
    """
    return Payment.get_or_none(Payment.id == payment_id)


def get_payments_by_client_id(client_id: int) -> ModelSelect:
    """–ü–ª–∞—Ç–µ–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å—ã.

    Args:
        client_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞.

    Returns:
        ModelSelect: –í—ã–±–æ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∫–ª–∏–µ–Ω—Ç–∞.
    """
    return (
        Payment.select()
        .join(Policy)
        .where((Policy.client == client_id) & (Payment.is_deleted == False))
    )


def get_payments_page(
    page: int,
    per_page: int,
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    only_paid: bool = False,
    **filters,
) -> ModelSelect:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.

    Args:
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        search_text: –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞.
        show_deleted: –£—á–∏—Ç—ã–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.
        deal_id: –§–∏–ª—å—Ç—Ä –ø–æ —Å–¥–µ–ª–∫–µ.
        only_paid: –¢–æ–ª—å–∫–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ/–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ.

    Returns:
        ModelSelect: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    query = build_payment_query(
        search_text=search_text,
        show_deleted=show_deleted,
        deal_id=deal_id,
        only_paid=only_paid,
        **filters,
    )
    offset = (page - 1) * per_page
    return query.order_by(Payment.payment_date.asc()).offset(offset).limit(per_page)


def mark_payment_deleted(payment_id: int):
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω–Ω—ã–º."""
    payment = Payment.get_or_none(Payment.id == payment_id)
    if payment:
        payment.is_deleted = True
        payment.save()
    else:
        logger.warning("‚ùó –ü–ª–∞—Ç—ë–∂ —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", payment_id)


def mark_payments_paid(payment_ids: list[int], paid_date: date | None = None) -> int:
    """–ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ.

    Args:
        payment_ids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π.
        paid_date: –î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞,
            –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ``02.01.1900``.

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
    """
    if not payment_ids:
        return 0
    paid_date = paid_date or date(1900, 1, 2)
    return (
        Payment.update(actual_payment_date=paid_date)
        .where(Payment.id.in_(payment_ids))
        .execute()
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def add_payment(**kwargs):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞.

    Args:
        **kwargs: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞, –≤–∫–ª—é—á–∞—è ``policy``/``policy_id`` –∏ ``amount``.

    Returns:
        Payment: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂.
    """
    from services.income_service import add_income

    policy = kwargs.get("policy") or Policy.get_or_none(
        Policy.id == kwargs.get("policy_id")
    )
    if not policy:
        logger.warning(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª–∏—Å #%s",
            kwargs.get("policy_id"),
        )
        raise ValueError("–ü–æ–ª–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    amount = kwargs.get("amount")
    payment_date = kwargs.get("payment_date")
    if amount is None or payment_date is None:
        raise ValueError("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: amount –∏ payment_date")

    allowed_fields = {"amount", "payment_date", "actual_payment_date"}

    clean_data = {
        field: kwargs[field]
        for field in allowed_fields
        if field in kwargs  # —É–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ None
    }
    payment = Payment.create(policy=policy, is_deleted=False, **clean_data)
    logger.info(
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç—ë–∂ #%s –∫ –ø–æ–ª–∏—Å—É #%s –Ω–∞ —Å—É–º–º—É %.2f",
        payment.id,
        policy.policy_number,
        payment.amount,
    )
    try:
        # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –±–µ–∑ —Å—É–º–º—ã.
        # –°—É–º–º–∞ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.
        add_income(payment=payment, amount=0, policy=policy)
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞: %s", e)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    from services.expense_service import add_expense

    contractor = (policy.contractor or "").strip()  # —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ø–æ–ª–∏—Å–∞
    if contractor:  # –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ ‚Üí —Å—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º
        try:
            add_expense(
                payment=payment,
                amount=0,
                expense_type="–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
                note=f"–≤—ã–ø–ª–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É {contractor}",
            )
            logger.info(
                "üí∏ –ê–≤—Ç–æ-—Ä–∞—Å—Ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É: –ø–ª–∞—Ç—ë–∂ #%s ‚Üî –ø–æ–ª–∏—Å #%s (%s)",
                payment.id,
                policy.id,
                contractor,
            )
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: %s", e)

    return payment


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def update_payment(payment: Payment, **kwargs) -> Payment:
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        payment: –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        **kwargs: –ò–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ–ª—è.

    Returns:
        Payment: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂.
    """
    allowed_fields = {
        "amount",
        "payment_date",
        "actual_payment_date",
        "policy",
        "policy_id",
    }

    updates = {}

    for key, value in kwargs.items():
        if key in allowed_fields:
            if key == "policy_id" and not kwargs.get("policy"):
                value = Policy.get_or_none(Policy.id == value)
                key = "policy"
            updates[key] = value

    if not updates:
        return payment

    for key, value in updates.items():
        setattr(payment, key, value)

    payment.save()
    return payment


def apply_payment_filters(
    query: ModelSelect,
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    only_paid: bool = False,
) -> ModelSelect:
    """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    if deal_id is not None:
        query = query.where(Policy.deal_id == deal_id)
    if not show_deleted:
        query = query.where(Payment.is_deleted == False)
    if search_text:
        query = query.where(
            (Policy.policy_number.contains(search_text))
            | (Client.name.contains(search_text))
        )
    if not only_paid:
        query = query.where(Payment.actual_payment_date.is_null(True))

    return query


def build_payment_query(
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    only_paid: bool = False,
    **filters,
) -> ModelSelect:
    """–°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π —Å –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏."""
    income_subq = Income.select(fn.COUNT(Income.id)).where(Income.payment == Payment.id)
    expense_subq = Expense.select(fn.COUNT(Expense.id)).where(
        Expense.payment == Payment.id
    )

    # –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º JOIN –∫ Policy –∏ Client
    query = (
        Payment.select(
            Payment,
            Payment.id,
            Payment.amount,
            Payment.payment_date,
            Payment.actual_payment_date,  # üîß –Ø–≤–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
            Payment.is_deleted,
            income_subq.alias("income_count"),
            expense_subq.alias("expense_count"),
        )
        .join(Policy)  # –æ–±—ã—á–Ω—ã–π JOIN, —Ç.–∫. –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å –ø–æ–ª–∏—Å–æ–º
        .join(Client, JOIN.LEFT_OUTER, on=(Policy.client == Client.id))
    )

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ deal_id —á–µ—Ä–µ–∑ Policy
    query = apply_payment_filters(query, search_text, show_deleted, deal_id, only_paid)

    return query


def get_payments_by_deal_id(deal_id: int) -> ModelSelect:
    """–ü–ª–∞—Ç–µ–∂–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–¥–µ–ª–∫–µ.

    Args:
        deal_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏.

    Returns:
        ModelSelect: –í—ã–±–æ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Å–¥–µ–ª–∫–µ.
    """
    return (
        Payment.select()
        .join(Policy)
        .where((Policy.deal_id == deal_id) & (Payment.is_deleted == False))
        .order_by(Payment.payment_date.asc())
    )
