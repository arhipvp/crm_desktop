"""–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏."""

import logging
from datetime import date
from decimal import Decimal

from peewee import JOIN, ModelSelect, fn

from database.db import db
from database.models import Client, Expense, Income, Payment, Policy

ACTIVE = Payment.is_deleted == False

logger = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ CRUD ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def get_all_payments() -> ModelSelect:
    """–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö."""
    return Payment.select().where(ACTIVE)


def get_payments_by_policy_id(policy_id: int) -> ModelSelect:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–ª–∏—Å—É."""
    return Payment.select().where((Payment.policy_id == policy_id) & ACTIVE)


def get_payment_by_id(payment_id: int) -> Payment | None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""
    return Payment.get_or_none(Payment.id == payment_id)


def get_payments_by_client_id(client_id: int) -> ModelSelect:
    """–ü–ª–∞—Ç–µ–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å—ã."""
    return (
        Payment.select()
        .join(Policy)
        .where((Policy.client == client_id) & ACTIVE)
    )


def get_payments_page(
    page: int,
    per_page: int,
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    include_paid: bool = True,
    column_filters: dict[str, str] | None = None,
    **filters,
) -> ModelSelect:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    query = build_payment_query(
        search_text=search_text,
        show_deleted=show_deleted,
        deal_id=deal_id,
        include_paid=include_paid,
        column_filters=column_filters,
        **filters,
    )
    offset = (page - 1) * per_page
    return query.order_by(Payment.payment_date.asc()).offset(offset).limit(per_page)


def mark_payment_deleted(payment_id: int):
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω–Ω—ã–º."""
    payment = Payment.get_or_none(Payment.id == payment_id)
    if payment:
        payment.soft_delete()
    else:
        logger.warning("‚ùó –ü–ª–∞—Ç—ë–∂ —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", payment_id)


def mark_payments_paid(payment_ids: list[int], paid_date: date | None = None) -> int:
    """
    –ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ.

    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è. –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã.
    """
    if not payment_ids:
        return 0
    paid_date = paid_date or date.today()
    return (
        Payment.update(actual_payment_date=paid_date)
        .where(
            (Payment.id.in_(payment_ids))
            & Payment.actual_payment_date.is_null(True)
        )
        .execute()
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def add_payment(**kwargs):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞."""
    from services.income_service import add_income
    from services.expense_service import add_expense

    policy = kwargs.get("policy") or Policy.get_or_none(
        Policy.id == kwargs.get("policy_id")
    )
    if not policy:
        logger.warning(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª–∏—Å #%s",
            kwargs.get("policy_id"),
        )
        raise ValueError("–ü–æ–ª–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    amount = kwargs.get("amount")
    payment_date = kwargs.get("payment_date")
    if amount is None or payment_date is None:
        raise ValueError("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: amount –∏ payment_date")

    allowed_fields = {"amount", "payment_date", "actual_payment_date"}
    clean_data = {f: kwargs[f] for f in allowed_fields if f in kwargs}
    if "amount" in clean_data:
        clean_data["amount"] = Decimal(str(clean_data["amount"]))

    contractor = (policy.contractor or "").strip()

    try:
        with db.atomic():
            payment = Payment.create(policy=policy, is_deleted=False, **clean_data)
            logger.info(
                "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç—ë–∂ #%s –∫ –ø–æ–ª–∏—Å—É #%s –Ω–∞ —Å—É–º–º—É %.2f",
                payment.id,
                policy.policy_number,
                payment.amount,
            )

            # –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ —Å –Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π
            add_income(payment=payment, amount=Decimal("0"), policy=policy)

            # –ê–≤—Ç–æ-—Ä–∞—Å—Ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –ø–æ–ª–∏—Å–µ)
            if contractor:
                add_expense(
                    payment=payment,
                    amount=Decimal("0"),
                    expense_type="–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
                    note=f"–≤—ã–ø–ª–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É {contractor}",
                )
                logger.info(
                    "üí∏ –ê–≤—Ç–æ-—Ä–∞—Å—Ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É: –ø–ª–∞—Ç—ë–∂ #%s ‚Üî –ø–æ–ª–∏—Å #%s (%s)",
                    payment.id,
                    policy.id,
                    contractor,
                )

        return payment
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        raise


def sync_policy_payments(policy: Policy, payments: list[dict] | None) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª–∏—Å–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º."""
    if payments is None:
        return

    # –£–¥–∞–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö
    zero_payments = [
        p for p in payments if Decimal(str(p.get("amount", 0))) == Decimal("0")
    ]
    if zero_payments and any(
        Decimal(str(p.get("amount", 0))) != Decimal("0") for p in payments
    ):
        (
            Payment.update(is_deleted=True)
            .where(
                (Payment.policy == policy)
                & (Payment.amount == Decimal("0"))
                & ACTIVE
            )
            .execute()
        )
        payments = [
            p for p in payments if Decimal(str(p.get("amount", 0))) != Decimal("0")
        ]

    existing = {
        (p.payment_date, p.amount): p
        for p in policy.payments.where(ACTIVE)
    }
    incoming: set[tuple[date, Decimal]] = set()

    for data in payments:
        payment_date = data.get("payment_date")
        amount = data.get("amount")
        if payment_date is None or amount is None:
            continue
        amount = Decimal(str(amount))
        key = (payment_date, amount)
        incoming.add(key)
        if key not in existing:
            add_payment(
                policy=policy, payment_date=payment_date, amount=amount
            )

    for key, payment in existing.items():
        if key not in incoming:
            if hasattr(payment, "soft_delete"):
                payment.soft_delete()
            else:
                payment.delete_instance()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def update_payment(payment: Payment, **kwargs) -> Payment:
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è –ø–ª–∞—Ç–µ–∂–∞."""
    allowed_fields = {
        "amount",
        "payment_date",
        "actual_payment_date",
        "policy",
        "policy_id",
    }
    updates: dict = {}

    for key, value in kwargs.items():
        if key in allowed_fields:
            if key == "policy_id" and not kwargs.get("policy"):
                value = Policy.get_or_none(Policy.id == value)
                key = "policy"
            if key == "amount" and value is not None:
                value = Decimal(str(value))
            updates[key] = value

    if not updates:
        return payment

    for key, value in updates.items():
        setattr(payment, key, value)

    payment.save()
    return payment


def apply_payment_filters(
    query: ModelSelect,
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    include_paid: bool = True,
    column_filters: dict[str, str] | None = None,
) -> ModelSelect:
    """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    if deal_id is not None:
        query = query.where(Policy.deal_id == deal_id)
    if not show_deleted:
        query = query.where(ACTIVE)
    if search_text:
        query = query.where(
            (Policy.policy_number.contains(search_text))
            | (Client.name.contains(search_text))
        )
    if not include_paid:
        query = query.where(Payment.actual_payment_date.is_null(True))

    from services.query_utils import apply_column_filters
    query = apply_column_filters(query, column_filters, Payment)
    return query


def build_payment_query(
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    include_paid: bool = True,
    column_filters: dict[str, str] | None = None,
    **filters,
) -> ModelSelect:
    """–°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π —Å –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏."""
    income_subq = Income.select(fn.COUNT(Income.id)).where(Income.payment == Payment.id)
    expense_subq = Expense.select(fn.COUNT(Expense.id)).where(
        Expense.payment == Payment.id
    )

    query = (
        Payment.select(
            Payment,
            Payment.id,
            Payment.amount,
            Payment.payment_date,
            Payment.actual_payment_date,
            Payment.is_deleted,
            income_subq.alias("income_count"),
            expense_subq.alias("expense_count"),
        )
        .join(Policy)
        .join(Client, JOIN.LEFT_OUTER, on=(Policy.client == Client.id))
    )

    query = apply_payment_filters(
        query, search_text, show_deleted, deal_id, include_paid, column_filters
    )
    return query


def get_payments_by_deal_id(deal_id: int) -> ModelSelect:
    """–ü–ª–∞—Ç–µ–∂–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–¥–µ–ª–∫–µ."""
    return (
        Payment.select()
        .join(Policy)
        .where((Policy.deal_id == deal_id) & ACTIVE)
        .order_by(Payment.payment_date.asc())
    )
