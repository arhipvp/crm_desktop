"""–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏."""

import logging
from collections import defaultdict
from datetime import date
from decimal import Decimal
from typing import Any

from peewee import JOIN, ModelSelect, fn, Field

from database.db import db
from database.models import Client, Expense, Income, Payment, Policy
from services.query_utils import apply_search_and_filters, sum_column

# –í—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–Ω–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö)
ACTIVE = (Payment.is_deleted == False)

logger = logging.getLogger(__name__)


def _soft_delete_payment_relations(
    payment: Payment, *, keep_non_zero_expenses: bool
) -> tuple[int, int, bool]:
    """–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å —É—á—ë—Ç–æ–º –Ω–µ–Ω—É–ª–µ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."""

    def _delete_payment(target: Payment) -> None:
        if hasattr(target, "soft_delete"):
            target.soft_delete()
        else:
            target.delete_instance()

    incomes_deleted = expenses_deleted = 0
    has_active_non_zero_expenses = False
    payment_deleted = False

    with db.atomic():
        active_incomes = list(
            Income.select().where(
                (Income.payment == payment) & (Income.is_deleted == False)
            )
        )
        if active_incomes:
            income_ids = [income.id for income in active_incomes]
            incomes_deleted = (
                Income.update(is_deleted=True)
                .where(Income.id.in_(income_ids))
                .execute()
            )

        active_expenses = list(
            Expense.select().where(
                (Expense.payment == payment) & (Expense.is_deleted == False)
            )
        )
        zero_expense_ids = [
            expense.id for expense in active_expenses if expense.amount == 0
        ]
        non_zero_expense_ids = [
            expense.id for expense in active_expenses if expense.amount != 0
        ]

        if zero_expense_ids:
            expenses_deleted += (
                Expense.update(is_deleted=True)
                .where(Expense.id.in_(zero_expense_ids))
                .execute()
            )

        if keep_non_zero_expenses:
            has_active_non_zero_expenses = bool(non_zero_expense_ids)
            if not has_active_non_zero_expenses:
                _delete_payment(payment)
                payment_deleted = True
        else:
            if non_zero_expense_ids:
                expenses_deleted += (
                    Expense.update(is_deleted=True)
                    .where(Expense.id.in_(non_zero_expense_ids))
                    .execute()
                )
            _delete_payment(payment)
            payment_deleted = True

    if keep_non_zero_expenses and has_active_non_zero_expenses:
        logger.warning(
            "‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ id=%s –Ω–µ —É–¥–∞–ª—ë–Ω –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–Ω—É–ª–µ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
            payment.id,
        )

    return incomes_deleted, expenses_deleted, payment_deleted


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ CRUD ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def get_all_payments() -> ModelSelect:
    """–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö."""
    return Payment.active()


def get_payments_by_policy_id(policy_id: int) -> ModelSelect:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–ª–∏—Å—É."""
    return Payment.active().where(Payment.policy_id == policy_id)


def get_payment_by_id(payment_id: int) -> Payment | None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""
    return Payment.get_or_none(Payment.id == payment_id)


def get_payments_by_client_id(client_id: int) -> ModelSelect:
    """–ü–ª–∞—Ç–µ–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å—ã."""
    return (
        Payment.active()
        .join(Policy)
        .where(Policy.client == client_id)
    )


def get_payments_page(
    page: int,
    per_page: int,
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    include_paid: bool = True,
    column_filters: dict | None = None,
    order_by: str | Field | None = Payment.payment_date,
    order_dir: str = "asc",
    **filters,
) -> ModelSelect:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    normalized_order_dir = (order_dir or "").strip().lower()
    if normalized_order_dir not in {"asc", "desc"}:
        normalized_order_dir = "asc"
    query = build_payment_query(
        search_text=search_text,
        show_deleted=show_deleted,
        deal_id=deal_id,
        include_paid=include_paid,
        column_filters=column_filters,
        order_by=order_by,
        order_dir=normalized_order_dir,
        **filters,
    )
    if not order_by:
        order_field = Payment.payment_date
    elif isinstance(order_by, str):
        order_field = getattr(Payment, order_by, Payment.payment_date)
    else:
        order_field = order_by
    order_expr = (
        order_field.desc()
        if normalized_order_dir == "desc"
        else order_field.asc()
    )
    offset = (page - 1) * per_page
    return query.order_by(order_expr).offset(offset).limit(per_page)


def mark_payment_deleted(payment_id: int):
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω–Ω—ã–º."""
    payment = Payment.get_or_none(Payment.id == payment_id)
    if not payment:
        logger.warning("‚ùó –ü–ª–∞—Ç—ë–∂ —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", payment_id)
        return

    income_deleted, expense_deleted, _ = _soft_delete_payment_relations(
        payment, keep_non_zero_expenses=False
    )

    logger.info(
        "üóëÔ∏è –ü–æ–º–µ—á–µ–Ω —É–¥–∞–ª—ë–Ω–Ω—ã–º –ø–ª–∞—Ç—ë–∂ id=%s; –¥–æ—Ö–æ–¥–æ–≤=%s, —Ä–∞—Å—Ö–æ–¥–æ–≤=%s",
        payment_id,
        income_deleted,
        expense_deleted,
    )


def restore_payment(payment_id: int):
    """–°–Ω—è—Ç—å –ø–æ–º–µ—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
    payment = Payment.get_or_none(Payment.id == payment_id)
    if not payment:
        logger.warning(
            "‚ùó –ü–ª–∞—Ç—ë–∂ —Å id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", payment_id
        )
        return

    with db.atomic():
        income_restored = (
            Income.update(is_deleted=False)
            .where(Income.payment == payment)
            .execute()
        )
        expense_restored = (
            Expense.update(is_deleted=False)
            .where(Expense.payment == payment)
            .execute()
        )
        payment.is_deleted = False
        payment.save(only=[Payment.is_deleted])

    logger.info(
        "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–ª–∞—Ç—ë–∂ id=%s; –¥–æ—Ö–æ–¥–æ–≤=%s, —Ä–∞—Å—Ö–æ–¥–æ–≤=%s",
        payment_id,
        income_restored,
        expense_restored,
    )


def mark_payments_paid(payment_ids: list[int], paid_date: date | None = None) -> int:
    """
    –ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ.

    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è. –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã.
    """
    if not payment_ids:
        return 0
    paid_date = paid_date or date.today()
    return (
        Payment.update(actual_payment_date=paid_date)
        .where(
            (Payment.id.in_(payment_ids))
            & Payment.actual_payment_date.is_null(True)
        )
        .execute()
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def add_payment(**kwargs):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ —Å –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω—É–ª–µ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞.

    –ê–≤—Ç–æ-—Ä–∞—Å—Ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª–∏—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ
    ``contractor``.
    """
    from services.income_service import add_income
    from services.expense_service import add_expense

    policy_id = kwargs.get("policy_id")
    policy = kwargs.get("policy") or Policy.get_or_none(
        Policy.id == policy_id
    )
    if not policy:
        num = kwargs.get("policy_number")
        msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª–∏—Å id=%s" + (
            f" ‚Ññ{num}" if num else ""
        )
        logger.warning(msg, policy_id)
        raise ValueError("–ü–æ–ª–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    amount = kwargs.get("amount")
    payment_date = kwargs.get("payment_date")
    if amount is None or payment_date is None:
        raise ValueError("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: amount –∏ payment_date")

    allowed_fields = {"amount", "payment_date", "actual_payment_date"}
    clean_data = {f: kwargs[f] for f in allowed_fields if f in kwargs}
    if "amount" in clean_data:
        clean_data["amount"] = Decimal(str(clean_data["amount"]))

    contractor = (policy.contractor or "").strip()
    if contractor in {"", "-", "‚Äî"}:
        contractor = ""

    try:
        with db.atomic():
            payment = Payment.create(policy=policy, is_deleted=False, **clean_data)
            logger.info(
                "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç—ë–∂ id=%s –∫ –ø–æ–ª–∏—Å—É id=%s ‚Ññ%s –Ω–∞ —Å—É–º–º—É %.2f",
                payment.id,
                policy.id,
                policy.policy_number,
                payment.amount,
            )

            # –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ —Å –Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π
            add_income(payment=payment, amount=Decimal("0"), policy=policy)

            # –ê–≤—Ç–æ-—Ä–∞—Å—Ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –ø–æ–ª–∏—Å–µ)
            if contractor:
                expense_kwargs = dict(
                    payment=payment,
                    amount=Decimal("0"),
                    expense_type="–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
                    note=f"–≤—ã–ø–ª–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É {contractor}",
                )

                add_expense(**expense_kwargs)
                logger.info(
                    "üí∏ –ê–≤—Ç–æ-—Ä–∞—Å—Ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É: –ø–ª–∞—Ç—ë–∂ id=%s ‚Üî –ø–æ–ª–∏—Å id=%s ‚Ññ%s (%s)",
                    payment.id,
                    policy.id,
                    policy.policy_number,
                    contractor,
                )

        return payment
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        raise


def sync_policy_payments(policy: Policy, payments: list[dict] | None) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª–∏—Å–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º."""
    if payments is None:
        return

    # –£–¥–∞–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö
    zero_payments = [
        p for p in payments if Decimal(str(p.get("amount", 0))) == Decimal("0")
    ]
    if zero_payments and any(
        Decimal(str(p.get("amount", 0))) != Decimal("0") for p in payments
    ):
        subq = (
            Payment.active()
            .where((Payment.policy == policy) & (Payment.amount == Decimal("0")))
            .select(Payment.id)
        )
        zero_payment_ids = [pid for (pid,) in subq.tuples()]
        zero_payments_deleted = income_deleted = expense_deleted = 0
        if zero_payment_ids:
            with db.atomic():
                zero_payments_deleted = (
                    Payment.update(is_deleted=True)
                    .where(Payment.id.in_(zero_payment_ids))
                    .execute()
                )
                income_deleted = (
                    Income.update(is_deleted=True)
                    .where(Income.payment_id.in_(zero_payment_ids))
                    .execute()
                )
                expense_deleted = (
                    Expense.update(is_deleted=True)
                    .where(Expense.payment_id.in_(zero_payment_ids))
                    .execute()
                )
        logger.info(
            "üóëÔ∏è –î–ª—è –ø–æ–ª–∏—Å–∞ id=%s –∞–≤—Ç–æ-–Ω—É–ª–µ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —É–¥–∞–ª–µ–Ω—ã: –ø–ª–∞—Ç–µ–∂–µ–π=%s, –¥–æ—Ö–æ–¥–æ–≤=%s, —Ä–∞—Å—Ö–æ–¥–æ–≤=%s",
            policy.id,
            zero_payments_deleted,
            income_deleted,
            expense_deleted,
        )
        payments = [
            p for p in payments if Decimal(str(p.get("amount", 0))) != Decimal("0")
        ]

    existing: defaultdict[tuple[date, Decimal], list[Payment]] = defaultdict(list)
    for p in Payment.active().where(Payment.policy == policy):
        existing[(p.payment_date, p.amount)].append(p)

    for data in payments:
        payment_date = data.get("payment_date")
        amount = data.get("amount")
        actual_payment_date = data.get("actual_payment_date")
        if payment_date is None or amount is None:
            continue
        amount = Decimal(str(amount))
        key = (payment_date, amount)
        if existing[key]:
            payment = existing[key].pop(0)
            if actual_payment_date is None:
                if payment.actual_payment_date is not None:
                    update_payment(payment, actual_payment_date=None)
            elif payment.actual_payment_date != actual_payment_date:
                update_payment(payment, actual_payment_date=actual_payment_date)
        else:
            add_payment(
                policy=policy,
                payment_date=payment_date,
                amount=amount,
                actual_payment_date=actual_payment_date,
            )

    for payments_list in existing.values():
        for payment in payments_list:
            _soft_delete_payment_relations(
                payment, keep_non_zero_expenses=True
            )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def update_payment(payment: Payment, **kwargs) -> Payment:
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è –ø–ª–∞—Ç–µ–∂–∞."""
    allowed_fields = {
        "amount",
        "payment_date",
        "actual_payment_date",
        "policy",
        "policy_id",
    }
    updates: dict[str, Any] = {}

    for key, value in kwargs.items():
        if key in allowed_fields:
            if key == "policy_id" and not kwargs.get("policy"):
                value = Policy.get_or_none(Policy.id == value)
                key = "policy"
            if key == "amount" and value is not None:
                value = Decimal(str(value))
            updates[key] = value

    if not updates:
        return payment

    log_updates: dict[str, Any] = {}
    with db.atomic():
        for key, value in updates.items():
            setattr(payment, key, value)
            if hasattr(value, "id"):
                log_updates[key] = value.id
            elif isinstance(value, Decimal):
                log_updates[key] = str(value)
            else:
                log_updates[key] = value

        payment.save()
        logger.info("‚úèÔ∏è –ü–ª–∞—Ç—ë–∂ id=%s –æ–±–Ω–æ–≤–ª—ë–Ω: %s", payment.id, log_updates)

    return payment


def apply_payment_filters(
    query: ModelSelect,
    search_text: str = "",
    deal_id: int | None = None,
    include_paid: bool = True,
    column_filters: dict | None = None,
) -> ModelSelect:
    """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    if deal_id is not None:
        query = query.where(Policy.deal_id == deal_id)
    extra_fields = [Policy.policy_number, Client.name]
    query = apply_search_and_filters(
        query, Payment, search_text, column_filters, extra_fields
    )
    if not include_paid:
        query = query.where(Payment.actual_payment_date.is_null(True))
    return query


def build_payment_query(
    search_text: str = "",
    show_deleted: bool = False,
    deal_id: int | None = None,
    include_paid: bool = True,
    column_filters: dict | None = None,
    order_by: str | Field | None = None,
    order_dir: str = "asc",
    **filters,
) -> ModelSelect:
    """–°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π —Å –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏."""
    income_subq = Income.select(fn.COUNT(Income.id)).where(Income.payment == Payment.id)
    expense_subq = Expense.select(fn.COUNT(Expense.id)).where(
        Expense.payment == Payment.id
    )

    base = Payment.active() if not show_deleted else Payment.select()
    query = (
        base.select(
            Payment,
            Payment.id,
            Payment.amount,
            Payment.payment_date,
            Payment.actual_payment_date,
            Payment.is_deleted,
            income_subq.alias("income_count"),
            expense_subq.alias("expense_count"),
        )
        .join(Policy)
        .join(Client, JOIN.LEFT_OUTER, on=(Policy.client == Client.id))
    )

    query = apply_payment_filters(
        query, search_text=search_text, deal_id=deal_id, include_paid=include_paid, column_filters=column_filters
    )
    return query


def get_payments_by_deal_id(deal_id: int) -> ModelSelect:
    """–ü–ª–∞—Ç–µ–∂–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–¥–µ–ª–∫–µ."""
    return (
        Payment.active()
        .join(Policy)
        .where(Policy.deal_id == deal_id)
        .order_by(Payment.payment_date.asc())
    )


def get_payment_counts_by_deal_id(deal_id: int) -> tuple[int, int]:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Å–¥–µ–ª–∫–µ."""
    base = Payment.active().join(Policy).where(Policy.deal_id == deal_id)
    open_count = base.where(Payment.actual_payment_date.is_null(True)).count()
    closed_count = base.where(Payment.actual_payment_date.is_null(False)).count()
    return open_count, closed_count


def get_payment_amounts_by_deal_id(deal_id: int) -> tuple[Decimal, Decimal]:
    """–í–µ—Ä–Ω—É—Ç—å —Å—É–º–º—ã –æ–∂–∏–¥–∞–µ–º—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Å–¥–µ–ª–∫–µ."""

    base = Payment.active().join(Policy).where(Policy.deal_id == deal_id)
    expected = sum_column(
        base.where(Payment.actual_payment_date.is_null(True)), Payment.amount
    )
    received = sum_column(
        base.where(Payment.actual_payment_date.is_null(False)), Payment.amount
    )
    return expected, received
